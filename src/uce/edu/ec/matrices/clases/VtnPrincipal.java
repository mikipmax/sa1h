/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uce.edu.ec.matrices.clases;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Arrays;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import sun.security.util.Length;

/**
 *
 * @author Mickmaxy
 */
public class VtnPrincipal extends javax.swing.JFrame {

    public static JTextField[][] ma;
    public static JTextField[][] mat;

    public static JTextField[][] ma1;
    public static JTextField[][] ma1t;
    public static JTextField[][] mac;
    public static JTextField[][] maGJ;
    public static JTextField[][] maGJt;
    public static JTextField[][] maIn;
    public static JTextField[][] c;
    static int fil, col, fil1, col1, fil2, col2, fil3, col3;
    public static int va = 10;

    public VtnPrincipal() {

        initComponents();

        setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu3 = new javax.swing.JMenu();
        jLabel15 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        btnIns1 = new javax.swing.JButton();
        btnIns3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jscGaussJ = new javax.swing.JScrollPane();
        jPGauusJ = new javax.swing.JPanel();
        txtIncognitas = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnInsertarInc = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        txAProceaso1 = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        jPanel8 = new javax.swing.JPanel();
        jSinc = new javax.swing.JScrollPane();
        jPNI = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        jButton21 = new javax.swing.JButton();
        jButton22 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnIns = new javax.swing.JButton();
        txtCol = new javax.swing.JTextField();
        txtFil = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        txtFil1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtCol1 = new javax.swing.JTextField();
        btnIns2 = new javax.swing.JButton();
        txtEscalar = new javax.swing.JTextField();
        txtEscalar1 = new javax.swing.JTextField();
        txtDA = new javax.swing.JTextField();
        txtDA1 = new javax.swing.JTextField();
        jButton16 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel22 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();

        jMenu3.setText("jMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setMinimumSize(new java.awt.Dimension(1285, 585));
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/f11.png"))); // NOI18N
        getContentPane().add(jLabel15);
        jLabel15.setBounds(0, 0, 1290, 40);

        jToolBar1.setRollover(true);
        jToolBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jToolBar1.setEnabled(false);
        jToolBar1.setOpaque(false);

        jButton1.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b4.png"))); // NOI18N
        jButton1.setText("Borrar");
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setMaximumSize(new java.awt.Dimension(85, 25));
        jButton1.setMinimumSize(new java.awt.Dimension(85, 25));
        jButton1.setPreferredSize(new java.awt.Dimension(85, 25));
        jButton1.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        jButton1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        btnIns1.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        btnIns1.setForeground(new java.awt.Color(255, 255, 255));
        btnIns1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b4.png"))); // NOI18N
        btnIns1.setText("A + B");
        btnIns1.setBorderPainted(false);
        btnIns1.setContentAreaFilled(false);
        btnIns1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnIns1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnIns1.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        btnIns1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        btnIns1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIns1ActionPerformed(evt);
            }
        });
        jToolBar1.add(btnIns1);

        btnIns3.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        btnIns3.setForeground(new java.awt.Color(255, 255, 255));
        btnIns3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b4.png"))); // NOI18N
        btnIns3.setText("A - B");
        btnIns3.setBorderPainted(false);
        btnIns3.setContentAreaFilled(false);
        btnIns3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnIns3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnIns3.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        btnIns3.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        btnIns3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIns3ActionPerformed(evt);
            }
        });
        jToolBar1.add(btnIns3);

        jButton4.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b4.png"))); // NOI18N
        jButton4.setText("A B");
        jButton4.setBorderPainted(false);
        jButton4.setContentAreaFilled(false);
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        jButton4.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton4);

        jButton3.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b4.png"))); // NOI18N
        jButton3.setText("k(A)");
        jButton3.setBorderPainted(false);
        jButton3.setContentAreaFilled(false);
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        jButton3.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jButton17.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jButton17.setForeground(new java.awt.Color(255, 255, 255));
        jButton17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b1.png"))); // NOI18N
        jButton17.setText("k(B)");
        jButton17.setBorderPainted(false);
        jButton17.setContentAreaFilled(false);
        jButton17.setFocusable(false);
        jButton17.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton17.setMaximumSize(new java.awt.Dimension(85, 25));
        jButton17.setMinimumSize(new java.awt.Dimension(85, 25));
        jButton17.setPreferredSize(new java.awt.Dimension(85, 25));
        jButton17.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        jButton17.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton17);

        jButton5.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b4.png"))); // NOI18N
        jButton5.setText("A^-1");
        jButton5.setBorderPainted(false);
        jButton5.setContentAreaFilled(false);
        jButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        jButton5.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton5);

        jButton10.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jButton10.setForeground(new java.awt.Color(255, 255, 255));
        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b4.png"))); // NOI18N
        jButton10.setText("B^-1");
        jButton10.setBorderPainted(false);
        jButton10.setContentAreaFilled(false);
        jButton10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton10.setFocusable(false);
        jButton10.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton10.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        jButton10.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton10);

        jButton2.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b4.png"))); // NOI18N
        jButton2.setText("|A|");
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        jButton2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton11.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jButton11.setForeground(new java.awt.Color(255, 255, 255));
        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b4.png"))); // NOI18N
        jButton11.setText("|B|");
        jButton11.setBorderPainted(false);
        jButton11.setContentAreaFilled(false);
        jButton11.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton11.setFocusable(false);
        jButton11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton11.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        jButton11.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton11);

        jButton7.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b4.png"))); // NOI18N
        jButton7.setText("Gauss A");
        jButton7.setBorderPainted(false);
        jButton7.setContentAreaFilled(false);
        jButton7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton7.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        jButton7.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton7);

        jButton12.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jButton12.setForeground(new java.awt.Color(255, 255, 255));
        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b4.png"))); // NOI18N
        jButton12.setText("Gauss B");
        jButton12.setBorderPainted(false);
        jButton12.setContentAreaFilled(false);
        jButton12.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton12.setFocusable(false);
        jButton12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton12.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        jButton12.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton12);

        getContentPane().add(jToolBar1);
        jToolBar1.setBounds(0, 0, 1290, 40);

        jTabbedPane4.setBackground(new java.awt.Color(102, 102, 102));
        jTabbedPane4.setMaximumSize(new java.awt.Dimension(780, 350));
        jTabbedPane4.setMinimumSize(new java.awt.Dimension(780, 350));
        jTabbedPane4.setPreferredSize(new java.awt.Dimension(780, 350));

        jPanel2.setLayout(null);

        jscGaussJ.setBackground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout jPGauusJLayout = new javax.swing.GroupLayout(jPGauusJ);
        jPGauusJ.setLayout(jPGauusJLayout);
        jPGauusJLayout.setHorizontalGroup(
            jPGauusJLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 331, Short.MAX_VALUE)
        );
        jPGauusJLayout.setVerticalGroup(
            jPGauusJLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 238, Short.MAX_VALUE)
        );

        jscGaussJ.setViewportView(jPGauusJ);

        jPanel2.add(jscGaussJ);
        jscGaussJ.setBounds(60, 130, 350, 190);

        txtIncognitas.setForeground(new java.awt.Color(255, 255, 255));
        txtIncognitas.setCaretColor(new java.awt.Color(204, 0, 0));
        txtIncognitas.setOpaque(false);
        txtIncognitas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIncognitasKeyTyped(evt);
            }
        });
        jPanel2.add(txtIncognitas);
        txtIncognitas.setBounds(190, 30, 60, 25);

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Número de incógnitas ");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(60, 30, 130, 30);

        btnInsertarInc.setForeground(new java.awt.Color(255, 255, 255));
        btnInsertarInc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b1.png"))); // NOI18N
        btnInsertarInc.setText("Insertar");
        btnInsertarInc.setBorder(null);
        btnInsertarInc.setBorderPainted(false);
        btnInsertarInc.setContentAreaFilled(false);
        btnInsertarInc.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnInsertarInc.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnInsertarInc.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        btnInsertarInc.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        btnInsertarInc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarIncActionPerformed(evt);
            }
        });
        jPanel2.add(btnInsertarInc);
        btnInsertarInc.setBounds(260, 30, 90, 25);

        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b1.png"))); // NOI18N
        jButton6.setText("Por la  inversa");
        jButton6.setBorder(null);
        jButton6.setBorderPainted(false);
        jButton6.setContentAreaFilled(false);
        jButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        jButton6.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton6);
        jButton6.setBounds(590, 30, 135, 25);

        txAProceaso1.setColumns(20);
        txAProceaso1.setRows(5);
        txAProceaso1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txAProceaso1.setEnabled(false);
        txAProceaso1.setOpaque(false);
        jScrollPane6.setViewportView(txAProceaso1);

        jPanel2.add(jScrollPane6);
        jScrollPane6.setBounds(480, 80, 360, 240);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1080, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 720, Short.MAX_VALUE)
        );

        jScrollPane7.setViewportView(jPanel8);

        jPanel2.add(jScrollPane7);
        jScrollPane7.setBounds(940, 80, 230, 240);

        javax.swing.GroupLayout jPNILayout = new javax.swing.GroupLayout(jPNI);
        jPNI.setLayout(jPNILayout);
        jPNILayout.setHorizontalGroup(
            jPNILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 321, Short.MAX_VALUE)
        );
        jPNILayout.setVerticalGroup(
            jPNILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jSinc.setViewportView(jPNI);

        jPanel2.add(jSinc);
        jSinc.setBounds(60, 80, 340, 40);

        jButton8.setForeground(new java.awt.Color(255, 255, 255));
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b1.png"))); // NOI18N
        jButton8.setText("Por Cramer");
        jButton8.setBorder(null);
        jButton8.setBorderPainted(false);
        jButton8.setContentAreaFilled(false);
        jButton8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton8.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        jButton8.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton8);
        jButton8.setBounds(730, 30, 135, 25);

        jButton9.setForeground(new java.awt.Color(255, 255, 255));
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b1.png"))); // NOI18N
        jButton9.setText("Por operaciones");
        jButton9.setBorder(null);
        jButton9.setBorderPainted(false);
        jButton9.setContentAreaFilled(false);
        jButton9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton9.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        jButton9.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton9);
        jButton9.setBounds(450, 30, 135, 25);

        jButton18.setForeground(new java.awt.Color(255, 255, 255));
        jButton18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b1.png"))); // NOI18N
        jButton18.setText("Copiar desde A");
        jButton18.setBorder(null);
        jButton18.setBorderPainted(false);
        jButton18.setContentAreaFilled(false);
        jButton18.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton18.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton18.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        jButton18.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton18);
        jButton18.setBounds(60, 340, 135, 25);

        jButton19.setForeground(new java.awt.Color(255, 255, 255));
        jButton19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b1.png"))); // NOI18N
        jButton19.setText("Copiar desde  B");
        jButton19.setBorder(null);
        jButton19.setBorderPainted(false);
        jButton19.setContentAreaFilled(false);
        jButton19.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton19.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton19.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        jButton19.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton19);
        jButton19.setBounds(250, 340, 135, 25);

        jButton20.setForeground(new java.awt.Color(255, 255, 255));
        jButton20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b1.png"))); // NOI18N
        jButton20.setText("Copiar desde C");
        jButton20.setBorder(null);
        jButton20.setBorderPainted(false);
        jButton20.setContentAreaFilled(false);
        jButton20.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton20.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton20.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        jButton20.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton20);
        jButton20.setBounds(440, 340, 135, 25);

        jButton21.setForeground(new java.awt.Color(255, 255, 255));
        jButton21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b1.png"))); // NOI18N
        jButton21.setText("(b) aleatorio");
        jButton21.setBorder(null);
        jButton21.setBorderPainted(false);
        jButton21.setContentAreaFilled(false);
        jButton21.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton21.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton21.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        jButton21.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton21);
        jButton21.setBounds(640, 340, 135, 25);

        jButton22.setForeground(new java.awt.Color(255, 255, 255));
        jButton22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b1.png"))); // NOI18N
        jButton22.setText("Pegar en A");
        jButton22.setBorder(null);
        jButton22.setBorderPainted(false);
        jButton22.setContentAreaFilled(false);
        jButton22.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton22.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton22.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        jButton22.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton22);
        jButton22.setBounds(850, 340, 135, 25);

        jButton23.setForeground(new java.awt.Color(255, 255, 255));
        jButton23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b1.png"))); // NOI18N
        jButton23.setText("Pegar en B");
        jButton23.setBorder(null);
        jButton23.setBorderPainted(false);
        jButton23.setContentAreaFilled(false);
        jButton23.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton23.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton23.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        jButton23.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton23);
        jButton23.setBounds(1040, 340, 135, 25);

        jLabel23.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setText("Solución");
        jPanel2.add(jLabel23);
        jLabel23.setBounds(1010, 50, 80, 17);

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo3s.png"))); // NOI18N
        jPanel2.add(jLabel13);
        jLabel13.setBounds(20, 20, 1180, 380);

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo2s.jpg"))); // NOI18N
        jPanel2.add(jLabel12);
        jLabel12.setBounds(0, -20, 1230, 440);

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/black70 copia.png"))); // NOI18N
        jPanel2.add(jLabel14);
        jLabel14.setBounds(0, 0, 1060, 720);

        jTabbedPane4.addTab("Sistemas de ecuaciones", jPanel2);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setMaximumSize(new java.awt.Dimension(780, 350));
        jPanel1.setMinimumSize(new java.awt.Dimension(780, 350));
        jPanel1.setLayout(null);

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("N° Filas");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(30, 54, 50, 10);

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("N° Columnas");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(30, 80, 80, 14);

        btnIns.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b1.png"))); // NOI18N
        btnIns.setText("Insertar");
        btnIns.setBorder(null);
        btnIns.setBorderPainted(false);
        btnIns.setContentAreaFilled(false);
        btnIns.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnIns.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnIns.setMaximumSize(new java.awt.Dimension(135, 15));
        btnIns.setMinimumSize(new java.awt.Dimension(135, 15));
        btnIns.setPreferredSize(new java.awt.Dimension(135, 15));
        btnIns.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        btnIns.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        btnIns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsActionPerformed(evt);
            }
        });
        jPanel1.add(btnIns);
        btnIns.setBounds(190, 70, 140, 30);

        txtCol.setForeground(new java.awt.Color(255, 255, 255));
        txtCol.setCaretColor(new java.awt.Color(204, 0, 0));
        txtCol.setOpaque(false);
        txtCol.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtColKeyTyped(evt);
            }
        });
        jPanel1.add(txtCol);
        txtCol.setBounds(120, 80, 60, 20);

        txtFil.setForeground(new java.awt.Color(255, 255, 255));
        txtFil.setCaretColor(new java.awt.Color(204, 0, 0));
        txtFil.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtFil.setOpaque(false);
        txtFil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFilActionPerformed(evt);
            }
        });
        txtFil.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFilKeyTyped(evt);
            }
        });
        jPanel1.add(txtFil);
        txtFil.setBounds(120, 50, 60, 20);

        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel5.setLayout(new java.awt.GridLayout(7, 0));
        jScrollPane1.setViewportView(jPanel5);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(80, 120, 250, 230);

        jPanel6.setLayout(new java.awt.GridLayout(1, 0));
        jScrollPane2.setViewportView(jPanel6);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(660, 120, 250, 230);

        jPanel4.setToolTipText("");
        jPanel4.setLayout(new java.awt.GridLayout(1, 0));
        jScrollPane3.setViewportView(jPanel4);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(390, 120, 250, 230);

        txtFil1.setForeground(new java.awt.Color(255, 255, 255));
        txtFil1.setCaretColor(new java.awt.Color(204, 0, 0));
        txtFil1.setOpaque(false);
        txtFil1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFil1ActionPerformed(evt);
            }
        });
        txtFil1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFil1KeyTyped(evt);
            }
        });
        jPanel1.add(txtFil1);
        txtFil1.setBounds(470, 50, 60, 20);

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("N° Filas");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(390, 50, 50, 14);

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("N° Columnas");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(390, 80, 90, 14);

        txtCol1.setForeground(new java.awt.Color(255, 255, 255));
        txtCol1.setCaretColor(new java.awt.Color(204, 0, 0));
        txtCol1.setOpaque(false);
        txtCol1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCol1KeyTyped(evt);
            }
        });
        jPanel1.add(txtCol1);
        txtCol1.setBounds(470, 80, 60, 20);

        btnIns2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b1.png"))); // NOI18N
        btnIns2.setText("Insertar");
        btnIns2.setBorder(null);
        btnIns2.setBorderPainted(false);
        btnIns2.setContentAreaFilled(false);
        btnIns2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnIns2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnIns2.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        btnIns2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        btnIns2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIns2ActionPerformed(evt);
            }
        });
        jPanel1.add(btnIns2);
        btnIns2.setBounds(540, 70, 100, 30);

        txtEscalar.setForeground(new java.awt.Color(255, 255, 255));
        txtEscalar.setCaretColor(new java.awt.Color(204, 0, 0));
        txtEscalar.setOpaque(false);
        txtEscalar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEscalarKeyTyped(evt);
            }
        });
        jPanel1.add(txtEscalar);
        txtEscalar.setBounds(40, 190, 30, 30);

        txtEscalar1.setForeground(new java.awt.Color(255, 255, 255));
        txtEscalar1.setCaretColor(new java.awt.Color(204, 0, 0));
        txtEscalar1.setOpaque(false);
        txtEscalar1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEscalar1KeyTyped(evt);
            }
        });
        jPanel1.add(txtEscalar1);
        txtEscalar1.setBounds(350, 190, 30, 30);

        txtDA.setEditable(false);
        txtDA.setForeground(new java.awt.Color(255, 255, 255));
        txtDA.setCaretColor(new java.awt.Color(204, 0, 0));
        txtDA.setOpaque(false);
        jPanel1.add(txtDA);
        txtDA.setBounds(1020, 30, 90, 20);

        txtDA1.setEditable(false);
        txtDA1.setForeground(new java.awt.Color(255, 255, 255));
        txtDA1.setOpaque(false);
        jPanel1.add(txtDA1);
        txtDA1.setBounds(1020, 60, 90, 20);

        jButton16.setForeground(new java.awt.Color(255, 255, 255));
        jButton16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b1.png"))); // NOI18N
        jButton16.setText("Copiar C→B");
        jButton16.setBorder(null);
        jButton16.setBorderPainted(false);
        jButton16.setContentAreaFilled(false);
        jButton16.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton16.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        jButton16.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton16);
        jButton16.setBounds(800, 360, 110, 25);

        jButton15.setForeground(new java.awt.Color(255, 255, 255));
        jButton15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b1.png"))); // NOI18N
        jButton15.setText("Copiar C→A");
        jButton15.setBorder(null);
        jButton15.setBorderPainted(false);
        jButton15.setContentAreaFilled(false);
        jButton15.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton15.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        jButton15.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton15);
        jButton15.setBounds(660, 360, 110, 25);

        jButton14.setForeground(new java.awt.Color(255, 255, 255));
        jButton14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b1.png"))); // NOI18N
        jButton14.setText("Copiar B→A");
        jButton14.setBorder(null);
        jButton14.setBorderPainted(false);
        jButton14.setContentAreaFilled(false);
        jButton14.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton14.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        jButton14.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton14);
        jButton14.setBounds(450, 360, 135, 25);

        jButton13.setForeground(new java.awt.Color(255, 255, 255));
        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b1.png"))); // NOI18N
        jButton13.setText("Copiar A→B");
        jButton13.setBorder(null);
        jButton13.setBorderPainted(false);
        jButton13.setContentAreaFilled(false);
        jButton13.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton13.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b2.png"))); // NOI18N
        jButton13.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/b3.png"))); // NOI18N
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton13);
        jButton13.setBounds(130, 360, 135, 25);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane4.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane4);
        jScrollPane4.setBounds(930, 120, 250, 230);

        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("Comprobación");
        jPanel1.add(jLabel22);
        jLabel22.setBounds(1010, 90, 130, 20);

        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("|B|");
        jPanel1.add(jLabel19);
        jLabel19.setBounds(980, 60, 30, 20);

        jLabel20.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Matriz C");
        jPanel1.add(jLabel20);
        jLabel20.setBounds(740, 20, 80, 17);

        jLabel6.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Matriz A");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(180, 20, 80, 17);

        jLabel7.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Matriz B");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(500, 20, 80, 17);

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("|A|");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(980, 30, 30, 20);

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Escalar");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(30, 230, 50, 14);

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Escalar");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(340, 230, 50, 14);

        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(jLabel18);
        jLabel18.setBounds(740, 90, 130, 20);

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo3s.png"))); // NOI18N
        jPanel1.add(jLabel17);
        jLabel17.setBounds(20, 10, 1180, 390);

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo2s.jpg"))); // NOI18N
        jPanel1.add(jLabel16);
        jLabel16.setBounds(0, -20, 1230, 440);

        jLabel21.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Matriz B");
        jPanel1.add(jLabel21);
        jLabel21.setBounds(500, 20, 80, 17);

        jTabbedPane4.addTab("Operaciones Básicas", jPanel1);

        getContentPane().add(jTabbedPane4);
        jTabbedPane4.setBounds(20, 70, 1230, 440);

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/77506782d130c09bdd5bf91562a7f3d4.jpg"))); // NOI18N
        jLabel11.setMaximumSize(new java.awt.Dimension(1036, 510));
        jLabel11.setMinimumSize(new java.awt.Dimension(1036, 510));
        getContentPane().add(jLabel11);
        jLabel11.setBounds(0, 0, 1290, 540);

        jMenu1.setText("Opciones");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Salir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);
        jMenu1.add(jSeparator3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Rango Aleatorio");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);
        jMenu1.add(jSeparator4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ayuda");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        jMenuItem2.setText("Acerca de.....");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);
        jMenu2.add(jSeparator2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem3.setText("Ayuda");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);
        jMenu2.add(jSeparator1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            if (!txtFil.getText().isEmpty() && !txtCol.getText().isEmpty()) {
                fil = Integer.parseInt(txtFil.getText());
                col = Integer.parseInt(txtCol.getText());
                for (int i = 0; i < fil; i++) {
                    for (int j = 0; j < col; j++) {
                        ma[i][j].setText("");

                    }
                }
            }
            if (!txtFil1.getText().isEmpty() && !txtCol1.getText().isEmpty()) {

                fil1 = Integer.parseInt(txtFil1.getText());
                col1 = Integer.parseInt(txtCol1.getText());
                for (int i = 0; i < fil1; i++) {
                    for (int j = 0; j < col1; j++) {
                        ma1[i][j].setText("");

                    }
                }
            }
            jPanel6.removeAll();
            jPanel6.updateUI();
            this.pack();
            if (!txtIncognitas.getText().isEmpty()) {
                for (int i = 0; i < Integer.parseInt(txtIncognitas.getText()); i++) {
                    for (int j = 0; j < Integer.parseInt(txtIncognitas.getText()) + 1; j++) {
                        maGJ[i][j].setText("");
                    }
                }
                jTextArea1.setText("");
                txAProceaso1.setText("");
                jPanel8.removeAll();
                jPanel8.updateUI();
                this.pack();
            }
        } catch (Exception e) {
        }


    }//GEN-LAST:event_jButton1ActionPerformed
    public void validarMatrices(int fila, int columna, int fila1, int columna2) {
        for (int i = 0; i < fila; i++) {
            for (int k = 0; k < columna; k++) {
                if (ma[i][k].getText().isEmpty()) {
                    ma[i][k].setText("0");
                }

            }
        }
        for (int i = 0; i < fila1; i++) {
            for (int j = 0; j < columna2; j++) {
                if (ma1[i][j].getText().isEmpty()) {
                    ma1[i][j].setText("0");
                }
            }
        }
    }
    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped

    }//GEN-LAST:event_formKeyTyped

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try {
            if (ma.length == ma[0].length) {

                fil = Integer.parseInt(txtFil.getText());
                col = Integer.parseInt(txtCol.getText());
                if (fil == col) {
                    jLabel18.setText("Gauss A");
                    jPanel6.removeAll();
                    for (int i = 0; i < fil; i++) {
                        for (int k = 0; k < col; k++) {
                            if (ma[i][k].getText().isEmpty()) {
                                ma[i][k].setText("0");
                            }

                        }
                    }

                    // maIn = new JTextField[fil][fil + 1];
                    double[][] min = new double[fil][col];
                    double[][] min1 = new double[fil][col];
                    double[][] min2 = new double[fil][col];

                    for (int i = 0; i < fil; i++) {
                        for (int j = 0; j < col; j++) {
                            min[i][j] = Double.parseDouble(ma[i][j].getText());
                        }

                    }

                    min2 = lsolve(min, fil);
                    mac = new JTextField[fil][col];
                    // min2 = gaussElim(min, fil, col);
                    for (int i = 0; i < fil; i++) {
                        for (int k = 0; k < col; k++) {
                            JCTextField j = new JCTextField();

                            j.setText(String.valueOf((double) Math.round(min2[i][k] * 100d) / 100d));
                            mac[i][k] = j;
                            jPanel6.add(j);

                            j.setEditable(false);
                        }

                    }

                    jScrollPane2.setPreferredSize(new Dimension());
                    jPanel6.setLayout(new GridLayout(fil, col));

                    jPanel6.updateUI();
                    this.pack();
                }
            } else {
                jLabel18.setText("No es una matriz cuadrada");
                jPanel6.removeAll();
                jPanel6.updateUI();
                this.pack();
            }
        } catch (Exception e) {
        }

    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
            fil = Integer.parseInt(txtFil.getText());
            col = Integer.parseInt(txtCol.getText());
            double des;
            if (fil == col) {
                jLabel18.setText("A^-1");
                double[][] m = new double[fil][col];
                double[][] m1 = new double[fil][col];
                for (int i = 0; i < fil; i++) {
                    for (int k = 0; k < col; k++) {
                        if (ma[i][k].getText().isEmpty()) {
                            ma[i][k].setText("0");
                        }

                    }
                }

                for (int i = 0; i < fil; i++) {
                    for (int j = 0; j < col; j++) {
                        m[i][j] = Double.parseDouble(ma[i][j].getText());
                        m1[i][j] = Double.parseDouble(ma[i][j].getText());
                    }
                }
                des = det(m1);
                if (des == 0.0 || des == -0.0) {
                    jPanel6.removeAll();
                    jTextArea1.setText("");
                    jLabel18.setText("A es una matriz singular");
                    jPanel6.updateUI();
                    this.pack();
                } else {

                    double q[][] = invert(m);

                    //double q[][] = inverse(m);
                    jPanel6.removeAll();
                    mac = new JTextField[fil][col];
                    for (int i = 0; i < fil; i++) {
                        for (int j = 0; j < col; j++) {

                            JTextField d = new JTextField();

                            d.setText(String.valueOf((double) Math.round(q[i][j] * 100) / 100));
                            mac[i][j] = d;
                            jPanel6.add(d);
                            
                            d.setEditable(false);
                        }

                    }

                    jScrollPane2.setPreferredSize(new Dimension());
                    jPanel6.setLayout(new GridLayout(fil, col));

                    jPanel6.updateUI();
                    this.pack();

                    jTextArea1.setText("");

                    double[][] mul = new double[ma.length][ma.length];
                    jTextArea1.append("A*A^-1 es igual a: \n");
                    for (int i = 0; i < ma.length; i++) {
                        for (int j = 0; j < ma[i].length; j++) {

                            for (int k = 0; k < ma.length; k++) {

                                mul[i][j] += Double.parseDouble(ma[i][k].getText()) * (double) Math.round(q[k][j] * 100) / 100;

                            }

                            jTextArea1.append("(" + String.valueOf((double) Math.round(mul[i][j] * 100d) / 100d) + ")");

                            if (j == ma.length - 1) {
                                jTextArea1.append("\n");
                            }

                        }

                    }

                }
            } else {
                jLabel18.setText("No es una matriz cuadrada");
                jPanel6.removeAll();
                jPanel6.updateUI();
                this.pack();
            }

        } catch (Exception e) {
        }

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        try {

            fil = Integer.parseInt(txtFil.getText());
            col = Integer.parseInt(txtCol.getText());

            if (fil == col) {
                if (ma.length < 11) {

                    jLabel18.setText("");
                    double[][] m = new double[fil][col];
                    for (int i = 0; i < fil; i++) {
                        for (int k = 0; k < col; k++) {
                            if (ma[i][k].getText().isEmpty()) {
                                ma[i][k].setText("0");
                            }

                        }
                    }

                    for (int i = 0; i < fil; i++) {
                        for (int j = 0; j < col; j++) {
                            m[i][j] = Double.parseDouble(ma[i][j].getText());
                        }
                    }
                    jLabel8.setText("|A|");

                    double dete = det(m);

                    if (dete == -0.0) {
                        txtDA.setText("0.0");
                    } else {
                        txtDA.setText(String.valueOf((double) Math.round(dete * 100d) / 100d));
                    }

                    jTextArea1.setText("");
                    double[][] mm = new double[ma.length][ma[0].length];
                    double[][] mm1 = new double[ma.length][ma[0].length];

                    jTextArea1.append("La matriz Adjunta de A\n");
                    for (int i = 0; i < ma.length; i++) {
                        for (int j = 0; j < ma[0].length; j++) {
                            mm[i][j] = Double.parseDouble(ma[i][j].getText());

                        }

                    }
                    mm1 = transpose(cofactor(mm));
                    for (int i = 0; i < ma.length; i++) {
                        for (int j = 0; j < ma[0].length; j++) {

                            jTextArea1.append("(" + String.valueOf((double) Math.round(mm1[i][j] * 100d) / 100d) + ")");
                            if (j == ma[0].length - 1) {
                                jTextArea1.append("\n");
                            }
                        }
                    }

                    double[][] mul = new double[ma.length][ma.length];
                    jTextArea1.append("Luego A*Adj(A) sería: \n");
                    for (int i = 0; i < ma.length; i++) {
                        for (int j = 0; j < ma[i].length; j++) {

                            for (int k = 0; k < ma.length; k++) {

                                mul[i][j] += Double.parseDouble(ma[i][k].getText()) * mm1[k][j];
                                //suma = mul[i][j];
                            }

                            jTextArea1.append("(" + String.valueOf((double) Math.round(mul[i][j] * 100d) / 100d) + ")");

                            if (j == ma.length - 1) {
                                jTextArea1.append("\n");
                            }

                        }

                    }

                } else {
                    jLabel18.setText("No se permite n>10");
                }

            } else {
                jLabel18.setText("No es una matriz cuadrada");
                txtDA.setText("");

            }
        } catch (Exception e) {
        }


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        try {

            jPanel6.removeAll();

            fil = Integer.parseInt(txtFil.getText());
            col = Integer.parseInt(txtCol.getText());
            fil1 = Integer.parseInt(txtFil1.getText());
            col1 = Integer.parseInt(txtCol1.getText());
            double[][] mul = new double[fil][col1];
            validarMatrices(fil, col, fil1, col1);
            //c = new JTextField[col][fil1];
            if (col == fil1) {
                jLabel18.setText("AB");
                mac = new JTextField[fil][col1];
                for (int i = 0; i < mul.length; i++) {
                    for (int j = 0; j < mul[i].length; j++) {

                        for (int k = 0; k < col; k++) {

                            mul[i][j] += Double.parseDouble(ma[i][k].getText()) * Double.parseDouble(ma1[k][j].getText());
                            //suma = mul[i][j];
                        }
                        JCTextField m = new JCTextField();

                        m.setText(String.valueOf((double) Math.round(mul[i][j] * 100d) / 100d));
                        mac[i][j] = m;
                        jPanel6.add(m);

                        m.setEditable(false);
                    }

                }
                jScrollPane1.setPreferredSize(new Dimension());
                jPanel6.setLayout(new GridLayout(fil, col1));

                jPanel6.updateUI();
                this.pack();
            } else {
                jLabel18.setText("No está definido AB");
                jPanel6.removeAll();
                jPanel6.updateUI();
                this.pack();

            }
        } catch (Exception e) {
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            if (!txtEscalar.getText().isEmpty()) {

                fil = Integer.parseInt(txtFil.getText());
                col = Integer.parseInt(txtCol.getText());
                for (int i = 0; i < fil; i++) {
                    for (int k = 0; k < col; k++) {
                        if (ma[i][k].getText().isEmpty()) {
                            ma[i][k].setText("0");
                        }

                    }
                }

                double escalar = Double.parseDouble(txtEscalar.getText());
                jLabel18.setText("(" + escalar + ")A");
                double es = 0;
                jPanel6.removeAll();
                mac = new JTextField[fil][col];
                for (int i = 0; i < fil; i++) {
                    for (int j = 0; j < col; j++) {
                        es = escalar * Double.parseDouble(ma[i][j].getText());
                        JTextField d = new JTextField();

                        d.setText(String.valueOf((double) Math.round(es * 100d) / 100d));
                        mac[i][j] = d;
                        jPanel6.add(d);
d.setEditable(false);
                       
                    }

                }

                jScrollPane2.setPreferredSize(new Dimension());
                jPanel6.setLayout(new GridLayout(fil, col));

                jPanel6.updateUI();
                this.pack();
                txtEscalar.setText(null);
            }

        } catch (Exception e) {
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void btnIns3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIns3ActionPerformed

        try {
            double resta = 0;
            fil = Integer.parseInt(txtFil.getText());
            col = Integer.parseInt(txtCol.getText());
            fil1 = Integer.parseInt(txtFil1.getText());
            col1 = Integer.parseInt(txtCol1.getText());
            if (ma.length == ma1.length && ma[0].length == ma1[0].length) {
                if (fil == fil1 && col == col1) {
                    jLabel18.setText("A - B");
                    jPanel6.removeAll();
                    validarMatrices(fil, col, fil1, col1);
                    mac = new JTextField[fil][col];
                    for (int i = 0; i < fil; i++) {
                        for (int k = 0; k < col; k++) {

                            resta = Double.parseDouble(ma[i][k].getText()) - Double.parseDouble(ma1[i][k].getText());

                            JCTextField j = new JCTextField();

                            j.setText(String.valueOf((double) Math.round(resta * 100d) / 100d));
                            //   ma[i][k] = j;
                            // j.setPlaceholder("0");

                            mac[i][k] = j;
                            jPanel6.add(j);

                            j.setEditable(false);

                        }

                    }
                    jScrollPane1.setPreferredSize(new Dimension());
                    jPanel6.setLayout(new GridLayout(fil, col));

                    jPanel6.updateUI();
                    this.pack();
                }
            } else {
                jLabel18.setText("No son del mismo orden");
                jPanel6.removeAll();
                jPanel6.updateUI();
                this.pack();
            }
        } catch (Exception e) {
        }


    }//GEN-LAST:event_btnIns3ActionPerformed

    private void btnIns2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIns2ActionPerformed
        if (!txtFil1.getText().isEmpty() && !txtCol1.getText().isEmpty()) {

            if (Integer.parseInt(txtFil1.getText()) != 0 || Integer.parseInt(txtCol1.getText()) != 0) {
                if (Integer.parseInt(txtFil1.getText()) <= 150 && Integer.parseInt(txtCol1.getText()) <= 150) {
                    jPanel4.removeAll();

                    fil = Integer.parseInt(txtFil1.getText());
                    col = Integer.parseInt(txtCol1.getText());

                    ma1 = new JTextField[fil][col];
                    for (int i = 0; i < fil; i++) {
                        for (int k = 0; k < col; k++) {
                            Integer valorAleatorio = (int) (Math.random() * va);

                            JCTextField b = new JCTextField();
                            b.setName("a" + (i + 1) + (k + 1));
                            b.setText(String.valueOf(valorAleatorio));
                            b.setPlaceholder("0");

                            //  b.setPreferredSize(new Dimension(50, 50));
                            ma1[i][k] = b;

                            jPanel4.add(b);

                            b.addKeyListener(new java.awt.event.KeyAdapter() {

                                @Override
                                public void keyTyped(java.awt.event.KeyEvent evt) {
                                    char a = evt.getKeyChar();
                                    boolean valido = false;

                                    if (a == '-') {
                                        Object component = evt.getComponent();
                                        if (component instanceof JTextField) {
                                            JTextField tf = (JTextField) component;
                                            valido = tf.getText().isEmpty();
                                        }

                                    } else if ((a >= '0' && a <= '9') || a == '.') {
                                        valido = true;
                                    }
                                    if (!valido) {
                                        evt.consume();
                                    }
                                    if (b.getText().length() == 10) {

                                        evt.consume();
                                        getToolkit().beep();
                                    }
                                    if (a == '.') {

                                        String dato = b.getText();
                                        int tama = dato.length();
                                        for (int i = 0; i <= tama; i++) {
                                            if (dato.contains(".")) {
                                                evt.setKeyChar((char) KeyEvent.VK_CLEAR);
                                            }
                                        }

                                    }

                                }
                            });
                        }

                    }

                    jScrollPane3.setPreferredSize(new Dimension());
                    if (fil == 1 && col == 1) {
                        jPanel4.setLayout(new GridBagLayout());
                        jPanel4.updateUI();
                        this.pack();

                    } else {
                        jPanel4.setLayout(new GridLayout(fil, col));

                        jPanel4.updateUI();
                        this.pack();
                    }
                } else {
                    System.out.println("El tamaño de la matriz es muy grande y demora");
                }
            }
        }
    }//GEN-LAST:event_btnIns2ActionPerformed

    private void btnIns1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIns1ActionPerformed

        try {

            jPanel6.removeAll();
            double resta = 0;
            fil = Integer.parseInt(txtFil.getText());
            col = Integer.parseInt(txtCol.getText());
            fil1 = Integer.parseInt(txtFil1.getText());
            col1 = Integer.parseInt(txtCol1.getText());

            if (ma.length == ma1.length && ma[0].length == ma1[0].length) {
                if (fil == fil1 && col == col1) {
                    jLabel18.setText("A + B");
                    validarMatrices(fil, col, fil1, col1);
                    mac = new JTextField[fil][col];
                    for (int i = 0; i < fil; i++) {
                        for (int k = 0; k < col; k++) {

                            resta = Double.parseDouble(ma[i][k].getText()) + Double.parseDouble(ma1[i][k].getText());

                            JCTextField j = new JCTextField();

                            j.setText(String.valueOf((double) Math.round(resta * 100d) / 100d));
                            mac[i][k] = j;
                            jPanel6.add(j);

                            j.setEditable(false);

                        }

                    }
                    jScrollPane1.setPreferredSize(new Dimension());
                    jPanel6.setLayout(new GridLayout(fil, col));

                    jPanel6.updateUI();
                    this.pack();
                }
            } else {
                jLabel18.setText("No son del mismo orden");
                jPanel6.removeAll();
                jPanel6.updateUI();
                this.pack();
            }

        } catch (Exception e) {

        }

    }//GEN-LAST:event_btnIns1ActionPerformed

    private void txtFil1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFil1ActionPerformed

    }//GEN-LAST:event_txtFil1ActionPerformed

    private void txtFilKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFilKeyTyped
        int k = (int) evt.getKeyChar();
        if (k >= 48 && k <= 57) {
            if (txtFil.getText().length() == 10) {

                evt.consume();
                getToolkit().beep();
            }
        } else {
            evt.setKeyChar((char) KeyEvent.VK_CLEAR);
            evt.consume();

            getToolkit().beep();
        }
    }//GEN-LAST:event_txtFilKeyTyped

    private void txtFilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFilActionPerformed

    }//GEN-LAST:event_txtFilActionPerformed

    private void btnInsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsActionPerformed
        if (!txtFil.getText().isEmpty() && !txtCol.getText().isEmpty()) {

            if (Integer.parseInt(txtFil.getText()) != 0 || Integer.parseInt(txtCol.getText()) != 0) {

                if (Integer.parseInt(txtFil.getText()) <= 150 && Integer.parseInt(txtCol.getText()) <= 150) {

                    jPanel5.removeAll();

                    fil = Integer.parseInt(txtFil.getText());
                    col = Integer.parseInt(txtCol.getText());
                    ma = new JTextField[fil][col];

                    for (int i = 0; i < fil; i++) {
                        for (int k = 0; k < col; k++) {
                            int valorAleatorio = (int) (Math.random() * va);

                            JCTextField j = new JCTextField();
                            //j.setName("a" + (i + 1) + (k + 1));
                            j.setText(String.valueOf(valorAleatorio));
                            ma[i][k] = j;
                            j.setPlaceholder("0");
                            jPanel5.add(j);

                            j.addKeyListener(new java.awt.event.KeyAdapter() {

                                @Override
                                public void keyTyped(java.awt.event.KeyEvent evt) {
                                    char a = evt.getKeyChar();
                                    boolean valido = false;

                                    if (a == '-') {
                                        Object component = evt.getComponent();
                                        if (component instanceof JTextField) {
                                            JTextField tf = (JTextField) component;
                                            valido = tf.getText().isEmpty();
                                        }

                                    } else if ((a >= '0' && a <= '9') || a == '.') {
                                        valido = true;
                                    }
                                    if (!valido) {
                                        evt.consume();
                                    }
                                    if (j.getText().length() == 10) {

                                        evt.consume();
                                        getToolkit().beep();
                                    }
                                    if (a == '.') {

                                        String dato = j.getText();
                                        int tama = dato.length();
                                        for (int i = 0; i <= tama; i++) {
                                            if (dato.contains(".")) {
                                                evt.setKeyChar((char) KeyEvent.VK_CLEAR);
                                            }
                                        }

                                    }

                                }
                            });

                        }

                    }
                    if (fil == 1 && col == 1) {
                        jPanel5.setLayout(new GridBagLayout());
                        jPanel5.updateUI();
                        this.pack();

                    } else {
                        jScrollPane1.setPreferredSize(new Dimension());
                        jPanel5.setLayout(new GridLayout(fil, col));

                        jPanel5.updateUI();
                        this.pack();
                    }
                } else {
                    System.out.println("El tamaño de la matriz es muy grande y demora");
                }
            }
        }


    }//GEN-LAST:event_btnInsActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed

        try {
            if (fil <= 80) {

                fil = Integer.parseInt(txtIncognitas.getText());

                if (fil == maGJ.length) {

                    jPanel8.removeAll();
                    txAProceaso1.setText(null);

                    // maIn = new JTextField[fil][fil + 1];
                    double[][] min = new double[fil][fil + 1];
                    double[][] min1 = new double[fil][fil];
                    double[] min2;
                    double[][] min3 = new double[fil][fil];
                    double[] b = new double[fil];
                    for (int i = 0; i < fil; i++) {
                        for (int k = 0; k < fil + 1; k++) {
                            if (maGJ[i][k].getText().isEmpty()) {
                                maGJ[i][k].setText("0");
                            }

                        }
                    }
                    for (int i = 0; i < fil; i++) {
                        for (int j = 0; j < fil + 1; j++) {
                            min[i][j] = Double.parseDouble(maGJ[i][j].getText());
                        }
                    }

                    for (int i = 0; i < fil; i++) {
                        for (int j = 0; j < fil + 1; j++) {

                            if (j < fil) {

                                min1[i][j] = min[i][j];
                            } else {
                                b[i] = min[i][j];

                            }

                        }
                    }
                    for (int i = 0; i < fil; i++) {
                        for (int j = 0; j < fil; j++) {
                            min3[i][j] = min1[i][j];

                        }

                    }
                    // min2 = cramer(min1, b);
                    min2 = GaussianElim(min1, b);

                    for (int i = 0; i < fil; i++) {

                        JCTextField j = new JCTextField();

                        j.setText(String.valueOf(("x" + (i + 1)) + "= " + (double) Math.round(min2[i] * 100d) / 100d));

                        jPanel8.add(j);

                        j.setEditable(false);

                    }
                    double aux[] = new double[fil];
                    txAProceaso1.append("\nComprobación\n\n");
                    // System.out.println("\nComprobación\n");
                    for (int i = 0; i < fil; i++) {
                        for (int j = 0; j < fil; j++) {

                            txAProceaso1.append(String.valueOf("(" + min3[i][j] + ")(" + (double) Math.round(min2[j] * 100d) / 100d + ")"));
                            //System.out.print("(" + min3[i][j] + ")(" + min2[j] + ")");
                            if (j < fil - 1) {
                                txAProceaso1.append("+");
                                //System.out.print("+");
                            }

                            aux[i] += min3[i][j] * min2[j];
                            //String a =
                            // String newa = a.substring(0, a.length() - 1);

                        }

                        txAProceaso1.append("=" + (double) Math.round(aux[i] * 100d) / 100d + "\n");
                        // System.out.println("=" + aux[i]);
                    }

                    jScrollPane7.setPreferredSize(new Dimension());
                    jPanel8.setLayout(new GridLayout(fil, 1));

                    jPanel8.updateUI();
                    this.pack();
                    // GaussianElim
                }
            } else {
                txAProceaso1.setText(null);
                jPanel8.removeAll();
                jPanel8.updateUI();
                this.pack();
            }
        } catch (Exception e) {
        }


    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        try {

            if (fil <= 10) {

                fil = Integer.parseInt(txtIncognitas.getText());
                if (fil == maGJ.length) {
                    jPanel8.removeAll();
                    txAProceaso1.setText(null);
                    // maIn = new JTextField[fil][fil + 1];
                    double[][] min = new double[fil][fil + 1];
                    double[][] min1 = new double[fil][fil];
                    double[] min2;
                    double[][] min3 = new double[fil][fil];
                    double[] b = new double[fil];
                    for (int i = 0; i < fil; i++) {
                        for (int k = 0; k < fil + 1; k++) {
                            if (maGJ[i][k].getText().isEmpty()) {
                                maGJ[i][k].setText("0");
                            }

                        }
                    }
                    for (int i = 0; i < fil; i++) {
                        for (int j = 0; j < fil + 1; j++) {
                            min[i][j] = Double.parseDouble(maGJ[i][j].getText());
                        }
                    }
                    txAProceaso1.append("La matriz de coeficientes es: \n");
                    for (int i = 0; i < fil; i++) {
                        for (int j = 0; j < fil + 1; j++) {

                            if (j < fil) {

                                min1[i][j] = min[i][j];
                                txAProceaso1.append("(" + String.valueOf(min1[i][j]) + ")");
                                if (j == fil - 1) {
                                    txAProceaso1.append("\n");
                                }
                            } else {
                                b[i] = min[i][j];

                            }

                        }
                    }
                    double detCo = determinant(min1, fil);
                    if (detCo == 0.0 || detCo == -0.0) {
                        jPanel8.removeAll();
                        txAProceaso1.setText("La matriz de coeficientes tiene determinante 0\n entonces no se puede resolver por este método");
                    } else {
                        txAProceaso1.append("La determinante es: " + (double) Math.round(detCo * 100d) / 100d + "\n");
                        for (int i = 0; i < fil; i++) {
                            for (int j = 0; j < fil; j++) {
                                min3[i][j] = min1[i][j];

                            }

                        }
                        // min2 = cramer(min1, b);
                        min2 = cramers(min1, b);

                        for (int i = 0; i < fil; i++) {

                            JCTextField j = new JCTextField();

                            j.setText(String.valueOf(("x" + (i + 1)) + "= " + (double) Math.round(min2[i] * 100d) / 100d));

                            jPanel8.add(j);

                            j.setEditable(false);

                        }
                        double aux[] = new double[fil];
                        txAProceaso1.append("\nComprobación\n\n");
                        // System.out.println("\nComprobación\n");
                        for (int i = 0; i < fil; i++) {
                            for (int j = 0; j < fil; j++) {

                                txAProceaso1.append(String.valueOf("(" + min3[i][j] + ")(" + (double) Math.round(min2[j] * 100d) / 100d + ")"));
                                //System.out.print("(" + min3[i][j] + ")(" + min2[j] + ")");
                                if (j < fil - 1) {
                                    txAProceaso1.append("+");
                                    //System.out.print("+");
                                }

                                aux[i] += min3[i][j] * min2[j];
                                //String a =
                                // String newa = a.substring(0, a.length() - 1);

                            }

                            txAProceaso1.append("=" + (double) Math.round(aux[i] * 100d) / 100d + "\n");
                            // System.out.println("=" + aux[i]);
                        }
                        jScrollPane7.setPreferredSize(new Dimension());
                        jPanel8.setLayout(new GridLayout(fil, 1));

                        jPanel8.updateUI();
                        this.pack();
                    }
                }
            } else {
                txAProceaso1.setText(null);
                jPanel8.removeAll();
                jPanel8.updateUI();
                this.pack();
            }
        } catch (Exception e) {
        }

    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {

            fil = Integer.parseInt(txtIncognitas.getText());
            if (fil == maGJ.length) {
                jPanel8.removeAll();
                txAProceaso1.setText(null);
                // maIn = new JTextField[fil][fil + 1];
                double[][] min = new double[fil][fil + 1];
                double[][] min1 = new double[fil][fil];
                double[][] mul = new double[fil][1];
                double[] b = new double[fil];
                double[][] min3 = new double[fil][fil];
                double[][] min4 = new double[fil][fil];
                for (int i = 0; i < fil; i++) {
                    for (int k = 0; k < fil + 1; k++) {
                        if (maGJ[i][k].getText().isEmpty()) {
                            maGJ[i][k].setText("0");
                        }

                    }
                }
                for (int i = 0; i < fil; i++) {
                    for (int j = 0; j < fil + 1; j++) {
                        min[i][j] = Double.parseDouble(maGJ[i][j].getText());

                    }
                }
                int con = 0;
                txAProceaso1.append("Matriz A\n");
                for (int i = 0; i < fil; i++) {
                    for (int j = 0; j < fil + 1; j++) {

                        if (j < fil) {

                            min1[i][j] = min[i][j];

                            txAProceaso1.append(String.valueOf("(" + (double) Math.round(min1[i][j] * 100d) / 100d) + " ) ");
                            if (j == fil - 1) {
                                txAProceaso1.append("\n");
                            }
                        } else {
                            b[i] = min[i][j];

                        }

                    }
                }
                for (int i = 0; i < fil; i++) {
                    for (int j = 0; j < fil; j++) {

                        min3[i][j] = min1[i][j];
                        min4[i][j] = min1[i][j];

                    }

                }

                double dete = det(min4);

                if (dete == 0.00 || dete == -0.00) {
                    jPanel8.removeAll();
                    txAProceaso1.setText("La matriz de coeficientes es singular");
                } else {
                    double q[][] = invert(min1);
                    txAProceaso1.append("Matriz (A^-1)\n");
                    for (int i = 0; i < mul.length; i++) {
                        for (int j = 0; j < mul[i].length; j++) {

                            for (int k = 0; k < fil; k++) {

                                mul[i][j] += (q[i][k]) * (b[k]);
                                //suma = mul[i][j];
                            }
                            JCTextField m = new JCTextField();

                            m.setText(String.valueOf(("x" + (i + 1)) + "= " + (double) Math.round(mul[i][j] * 100d) / 100d));
                            jPanel8.add(m);

                            m.setEditable(false);
                        }
                    }
                    for (int i = 0; i < fil; i++) {
                        for (int j = 0; j < fil; j++) {

                            txAProceaso1.append(String.valueOf("(" + (double) Math.round(q[i][j] * 100d) / 100d) + " ) ");

                            if (j == fil - 1) {
                                txAProceaso1.append("\n");
                            }

                        }
                    }
                    txAProceaso1.append("Vector b\n");
                    for (int i = 0; i < fil; i++) {
                        txAProceaso1.append(String.valueOf("(" + b[i]) + " )\n ");
                    }
                    double aux[] = new double[fil];
                    txAProceaso1.append("\nComprobación\n\n");
                    // System.out.println("\nComprobación\n");
                    for (int i = 0; i < fil; i++) {
                        for (int j = 0; j < fil; j++) {

                            txAProceaso1.append(String.valueOf("(" + min3[i][j] + ")(" + (double) Math.round(mul[j][0] * 100d) / 100d + ")"));
                            //System.out.print("(" + min3[i][j] + ")(" + min2[j] + ")");
                            if (j < fil - 1) {
                                txAProceaso1.append("+");
                                //System.out.print("+");
                            }

                            aux[i] += min3[i][j] * mul[j][0];
                            //String a =
                            // String newa = a.substring(0, a.length() - 1);

                        }

                        txAProceaso1.append("=" + (double) Math.round(aux[i] * 100d) / 100d + "\n");
                        // System.out.println("=" + aux[i]);
                    }
                    jScrollPane7.setPreferredSize(new Dimension());
                    jPanel8.setLayout(new GridLayout(fil, 1));

                    jPanel8.updateUI();
                    this.pack();
                }
            }
        } catch (Exception e) {
        }

    }//GEN-LAST:event_jButton6ActionPerformed

    private void btnInsertarIncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarIncActionPerformed
        try {
            if (!txtIncognitas.getText().isEmpty()) {
                if (Integer.parseInt(txtIncognitas.getText()) != 0) {

                    if (Integer.parseInt(txtIncognitas.getText()) <= 150) {

                        jPGauusJ.removeAll();
                        jPNI.removeAll();
                        fil = Integer.parseInt(txtIncognitas.getText());
                        for (int i = 0; i < fil + 1; i++) {
                            JTextField inc = new JTextField();
                            if (i < fil) {

                                inc.setText("x" + (i + 1));
                                inc.setPreferredSize(new Dimension(50, 20));
                                inc.setEditable(false);
                                jPNI.add(inc);
                            } else {
                                inc.setText(" b");
                                inc.setPreferredSize(new Dimension(50, 20));
                                inc.setEditable(false);
                                jPNI.add(inc);
                            }

                        }
                        jSinc.setPreferredSize(new Dimension());
                        jPNI.setLayout(new GridLayout(0, fil + 1));

                        jPNI.updateUI();
                        this.pack();

                        maGJ = new JTextField[fil][fil + 1];

                        for (int i = 0; i < fil; i++) {

                            for (int k = 0; k < fil + 1; k++) {

                                int valorAleatorio = (int) (Math.random() * va);

                                JCTextField u = new JCTextField();
                                u.setPreferredSize(new Dimension(50, 50));
                                u.setText(String.valueOf(valorAleatorio));
                                maGJ[i][k] = u;
                                u.setPlaceholder("0");
                                jPGauusJ.add(u);

                                u.addKeyListener(new java.awt.event.KeyAdapter() {

                                    @Override
                                    public void keyTyped(java.awt.event.KeyEvent evt) {
                                        char a = evt.getKeyChar();
                                        boolean valido = false;

                                        if (a == '-') {
                                            Object component = evt.getComponent();
                                            if (component instanceof JTextField) {
                                                JTextField tf = (JTextField) component;
                                                valido = tf.getText().isEmpty();
                                            }

                                        } else if ((a >= '0' && a <= '9') || a == '.') {
                                            valido = true;
                                        }
                                        if (!valido) {
                                            evt.consume();
                                        }
                                        if (u.getText().length() == 10) {

                                            evt.consume();
                                            getToolkit().beep();
                                        }
                                        if (a == '.') {

                                            String dato = u.getText();
                                            int tama = dato.length();
                                            for (int i = 0; i <= tama; i++) {
                                                if (dato.contains(".")) {
                                                    evt.setKeyChar((char) KeyEvent.VK_CLEAR);
                                                }
                                            }

                                        }

                                    }
                                });

                            }

                        }

                        jscGaussJ.setPreferredSize(new Dimension());
                        jPGauusJ.setLayout(new GridLayout(fil, fil + 1));

                        jPGauusJ.updateUI();
                        this.pack();

                    } else {
                        System.out.println("El tamaño de la matriz es muy grande y demora");
                    }
                }
            }
        } catch (Exception e) {
        }

    }//GEN-LAST:event_btnInsertarIncActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        try {
            fil1 = Integer.parseInt(txtFil1.getText());
            col1 = Integer.parseInt(txtCol1.getText());
            double des;
            if (fil1 == col1) {
                jLabel18.setText("B^-1");
                double[][] m = new double[fil1][col1];
                double[][] m1 = new double[fil1][col1];
                for (int i = 0; i < fil1; i++) {
                    for (int k = 0; k < col1; k++) {
                        if (ma1[i][k].getText().isEmpty()) {
                            ma1[i][k].setText("0");
                        }

                    }
                }

                for (int i = 0; i < fil1; i++) {
                    for (int j = 0; j < col1; j++) {
                        m[i][j] = Double.parseDouble(ma1[i][j].getText());
                        m1[i][j] = Double.parseDouble(ma1[i][j].getText());
                    }
                }
                des = det(m1);

                if (des == 0.0 || des == -0.0) {
                    jPanel6.removeAll();
                    jTextArea1.setText("");
                    jLabel18.setText("B es una matriz singular");
                    jPanel6.updateUI();
                    this.pack();
                } else {
                    double q[][] = invert(m);

                    //double q[][] = inverse(m);
                    jPanel6.removeAll();
                    mac = new JTextField[fil1][col1];
                    for (int i = 0; i < fil1; i++) {
                        for (int j = 0; j < col1; j++) {

                            JTextField d = new JTextField();

                            d.setText(String.valueOf((double) Math.round(q[i][j] * 100d) / 100d));
                            mac[i][j] = d;
                            jPanel6.add(d);
                            d.setEditable(false);
                        }

                    }

                    jScrollPane2.setPreferredSize(new Dimension());
                    jPanel6.setLayout(new GridLayout(fil1, col1));

                    jPanel6.updateUI();
                    this.pack();

                    jTextArea1.setText("");

                    double[][] mul = new double[ma1.length][ma1.length];
                    jTextArea1.append("B*B^-1 es igual a: \n");
                    for (int i = 0; i < ma1.length; i++) {
                        for (int j = 0; j < ma1[i].length; j++) {

                            for (int k = 0; k < ma1.length; k++) {

                                mul[i][j] += Double.parseDouble(ma1[i][k].getText()) * (double) Math.round(q[k][j] * 100) / 100;

                            }

                            jTextArea1.append("(" + String.valueOf((double) Math.round(mul[i][j] * 100d) / 100d) + ")");

                            if (j == ma1.length - 1) {
                                jTextArea1.append("\n");
                            }

                        }

                    }
                }
            } else {
                jLabel18.setText("No es una matriz cuadrada");
                jPanel6.removeAll();
                jPanel6.updateUI();
                this.pack();
            }
        } catch (Exception e) {
        }


    }//GEN-LAST:event_jButton10ActionPerformed

    private void txtColKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtColKeyTyped
        int k = (int) evt.getKeyChar();
        if (k >= 48 && k <= 57) {
            if (txtCol.getText().length() == 10) {

                evt.consume();
                getToolkit().beep();
            }
        } else {
            evt.setKeyChar((char) KeyEvent.VK_CLEAR);
            evt.consume();

            getToolkit().beep();
        }
    }//GEN-LAST:event_txtColKeyTyped

    private void txtFil1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFil1KeyTyped
        int k = (int) evt.getKeyChar();
        if (k >= 48 && k <= 57) {
            if (txtFil1.getText().length() == 10) {

                evt.consume();
                getToolkit().beep();
            }
        } else {
            evt.setKeyChar((char) KeyEvent.VK_CLEAR);
            evt.consume();

            getToolkit().beep();
        }
    }//GEN-LAST:event_txtFil1KeyTyped

    private void txtCol1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCol1KeyTyped
        int k = (int) evt.getKeyChar();
        if (k >= 48 && k <= 57) {
            if (txtCol1.getText().length() == 10) {

                evt.consume();
                getToolkit().beep();
            }
        } else {
            evt.setKeyChar((char) KeyEvent.VK_CLEAR);
            evt.consume();

            getToolkit().beep();
        }
    }//GEN-LAST:event_txtCol1KeyTyped

    private void txtEscalarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEscalarKeyTyped

        char a = evt.getKeyChar();
        boolean valido = false;

        if (a == '-') {
            Object component = evt.getComponent();
            if (component instanceof JTextField) {
                JTextField tf = (JTextField) component;
                valido = tf.getText().isEmpty();
            }

        } else if ((a >= '0' && a <= '9') || a == '.') {
            valido = true;
        }
        if (!valido) {
            evt.consume();
        }
        if (txtEscalar.getText().length() == 10) {

            evt.consume();
            getToolkit().beep();
        }
        if (a == '.') {

            String dato = txtEscalar.getText();
            int tama = dato.length();
            for (int i = 0; i <= tama; i++) {
                if (dato.contains(".")) {
                    evt.setKeyChar((char) KeyEvent.VK_CLEAR);
                }
            }

        }


    }//GEN-LAST:event_txtEscalarKeyTyped

    private void txtEscalar1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEscalar1KeyTyped
        char a = evt.getKeyChar();
        boolean valido = false;

        if (a == '-') {
            Object component = evt.getComponent();
            if (component instanceof JTextField) {
                JTextField tf = (JTextField) component;
                valido = tf.getText().isEmpty();
            }

        } else if ((a >= '0' && a <= '9') || a == '.') {
            valido = true;
        }
        if (!valido) {
            evt.consume();
        }
        if (txtEscalar1.getText().length() == 10) {

            evt.consume();
            getToolkit().beep();
        }
        if (a == '.') {

            String dato = txtEscalar1.getText();
            int tama = dato.length();
            for (int i = 0; i <= tama; i++) {
                if (dato.contains(".")) {
                    evt.setKeyChar((char) KeyEvent.VK_CLEAR);
                }
            }

        }
    }//GEN-LAST:event_txtEscalar1KeyTyped

    private void txtIncognitasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIncognitasKeyTyped
        int k = (int) evt.getKeyChar();
        if (k >= 48 && k <= 57) {
            if (txtIncognitas.getText().length() == 10) {

                evt.consume();
                getToolkit().beep();
            }
        } else {
            evt.setKeyChar((char) KeyEvent.VK_CLEAR);
            evt.consume();

            getToolkit().beep();
        }
    }//GEN-LAST:event_txtIncognitasKeyTyped

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        try {

            fil1 = Integer.parseInt(txtFil1.getText());
            col1 = Integer.parseInt(txtCol1.getText());

            if (fil1 == col1) {
                if (ma1.length < 11) {
                    jLabel18.setText("");
                    double[][] m = new double[fil1][col1];
                    for (int i = 0; i < fil1; i++) {
                        for (int k = 0; k < col1; k++) {
                            if (ma1[i][k].getText().isEmpty()) {
                                ma1[i][k].setText("0");
                            }

                        }
                    }

                    for (int i = 0; i < fil1; i++) {
                        for (int j = 0; j < col1; j++) {
                            m[i][j] = Double.parseDouble(ma1[i][j].getText());
                        }
                    }
                    jLabel19.setText("|B|");
                    double dete = det(m);
                    System.out.println(dete);

                    if (dete == -0.0) {
                        txtDA1.setText("0.0");

                    } else {
                        txtDA1.setText(String.valueOf((double) Math.round(dete * 100d) / 100d));
                    }

                    jTextArea1.setText("");
                    double[][] mm = new double[ma1.length][ma1[0].length];
                    double[][] mm1 = new double[ma1.length][ma1[0].length];

                    jTextArea1.append("La matriz Adjunta de B\n");
                    for (int i = 0; i < ma1.length; i++) {
                        for (int j = 0; j < ma1[0].length; j++) {
                            mm[i][j] = Double.parseDouble(ma1[i][j].getText());

                        }

                    }
                    mm1 = transpose(cofactor(mm));
                    for (int i = 0; i < ma1.length; i++) {
                        for (int j = 0; j < ma1[0].length; j++) {

                            jTextArea1.append("(" + String.valueOf((double) Math.round(mm1[i][j] * 100d) / 100d) + ")");
                            if (j == ma1[0].length - 1) {
                                jTextArea1.append("\n");
                            }
                        }
                    }

                    double[][] mul = new double[ma1.length][ma1.length];
                    jTextArea1.append("Luego B*Adj(B) sería: \n");
                    for (int i = 0; i < ma1.length; i++) {
                        for (int j = 0; j < ma1[i].length; j++) {

                            for (int k = 0; k < ma1.length; k++) {

                                mul[i][j] += Double.parseDouble(ma1[i][k].getText()) * mm1[k][j];
                                //suma = mul[i][j];
                            }

                            jTextArea1.append("(" + String.valueOf((double) Math.round(mul[i][j] * 100d) / 100d) + ")");

                            if (j == ma1.length - 1) {
                                jTextArea1.append("\n");
                            }

                        }

                    }
                } else {
                    jLabel18.setText("No se permite n>10");
                }
            } else {
                jLabel18.setText("No es una matriz cuadrada");
                txtDA1.setText("");

            }
        } catch (Exception e) {
        }

    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        try {
            if (ma1.length == ma1[0].length) {

                fil1 = Integer.parseInt(txtFil1.getText());
                col1 = Integer.parseInt(txtCol1.getText());
                if (fil1 == col1) {
                    jLabel18.setText("Gauss B");
                    jPanel6.removeAll();
                    for (int i = 0; i < fil1; i++) {
                        for (int k = 0; k < col1; k++) {
                            if (ma1[i][k].getText().isEmpty()) {
                                ma1[i][k].setText("0");
                            }

                        }
                    }

                    // maIn = new JTextField[fil][fil + 1];
                    double[][] min = new double[fil1][col1];
                    double[][] min1 = new double[fil1][col1];
                    double[][] min2 = new double[fil1][col1];

                    for (int i = 0; i < fil1; i++) {
                        for (int j = 0; j < col1; j++) {
                            min[i][j] = Double.parseDouble(ma1[i][j].getText());
                        }

                    }

                    min2 = lsolve(min, fil1);
                    mac = new JTextField[fil1][col1];
                    // min2 = gaussElim(min, fil, col);
                    for (int i = 0; i < fil1; i++) {
                        for (int k = 0; k < col1; k++) {
                            JCTextField j = new JCTextField();

                            j.setText(String.valueOf((double) Math.round(min2[i][k] * 100d) / 100d));
                            mac[i][k] = j;
                            jPanel6.add(j);

                            j.setEditable(false);
                        }

                    }

                    jScrollPane2.setPreferredSize(new Dimension());
                    jPanel6.setLayout(new GridLayout(fil1, col1));

                    jPanel6.updateUI();
                    this.pack();
                }
            } else {
                jLabel18.setText("No es una matriz cuadrada");
                jPanel6.removeAll();
                jPanel6.updateUI();
                this.pack();
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        new AcercaDe(this, rootPaneCheckingEnabled).setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        boolean canContinue = false;

        do {
            String userResponse = JOptionPane.showInputDialog(this, "Ingrese el rango randómico (mayor a 2): ", 10);

            try {
                va = Integer.parseInt(userResponse);
                canContinue = true;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Ingrese un número válido", "Error", JOptionPane.ERROR_MESSAGE);
                canContinue = false;
            }
        } while (!canContinue || va < 3);

    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        abrirArchivo("Manual.pdf");
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        try {
            //jPanel5.removeAll();
            jPanel4.removeAll();
            fil = ma.length;
            col = ma[0].length;
            txtFil1.setText(String.valueOf(fil));
            txtCol1.setText(String.valueOf(col));
            //fil1 = ma1.length;
            //col1 = ma1[0].length;
            mat = new JTextField[fil][col];
            ma1 = new JTextField[fil][col];

            for (int i = 0; i < fil; i++) {
                for (int k = 0; k < col; k++) {
                    mat[i][k] = ma[i][k];

                    JCTextField j = new JCTextField();
                    //j.setName("a" + (i + 1) + (k + 1));
                    j.setText(String.valueOf(mat[i][k].getText()));
                    ma1[i][k] = j;
                    j.setPlaceholder("0");
                    jPanel4.add(j);

                    j.addKeyListener(new java.awt.event.KeyAdapter() {

                        @Override
                        public void keyTyped(java.awt.event.KeyEvent evt) {
                            char a = evt.getKeyChar();
                            boolean valido = false;

                            if (a == '-') {
                                Object component = evt.getComponent();
                                if (component instanceof JTextField) {
                                    JTextField tf = (JTextField) component;
                                    valido = tf.getText().isEmpty();
                                }

                            } else if ((a >= '0' && a <= '9') || a == '.') {
                                valido = true;
                            }
                            if (!valido) {
                                evt.consume();
                            }
                            if (j.getText().length() == 10) {

                                evt.consume();
                                getToolkit().beep();
                            }
                            if (a == '.') {

                                String dato = j.getText();
                                int tama = dato.length();
                                for (int i = 0; i <= tama; i++) {
                                    if (dato.contains(".")) {
                                        evt.setKeyChar((char) KeyEvent.VK_CLEAR);
                                    }
                                }

                            }

                        }
                    });

                }

            }
            if (fil == 1 && col == 1) {
                jPanel4.setLayout(new GridBagLayout());
                jPanel4.updateUI();
                this.pack();

            } else {
                jScrollPane3.setPreferredSize(new Dimension());
                jPanel4.setLayout(new GridLayout(fil, col));

                jPanel4.updateUI();
                this.pack();
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        try {
            //jPanel5.removeAll();
            jPanel5.removeAll();
            fil1 = ma1.length;
            col1 = ma1[0].length;
            txtFil.setText(String.valueOf(fil1));
            txtCol.setText(String.valueOf(col1));
            //fil1 = ma1.length;
            //col1 = ma1[0].length;
            mat = new JTextField[fil1][col1];
            ma = new JTextField[fil1][col1];

            for (int i = 0; i < fil1; i++) {
                for (int k = 0; k < col1; k++) {
                    mat[i][k] = ma1[i][k];

                    JCTextField j = new JCTextField();
                    //j.setName("a" + (i + 1) + (k + 1));
                    j.setText(String.valueOf(mat[i][k].getText()));
                    ma[i][k] = j;
                    j.setPlaceholder("0");
                    jPanel5.add(j);

                    j.addKeyListener(new java.awt.event.KeyAdapter() {

                        @Override
                        public void keyTyped(java.awt.event.KeyEvent evt) {
                            char a = evt.getKeyChar();
                            boolean valido = false;

                            if (a == '-') {
                                Object component = evt.getComponent();
                                if (component instanceof JTextField) {
                                    JTextField tf = (JTextField) component;
                                    valido = tf.getText().isEmpty();
                                }

                            } else if ((a >= '0' && a <= '9') || a == '.') {
                                valido = true;
                            }
                            if (!valido) {
                                evt.consume();
                            }
                            if (j.getText().length() == 10) {

                                evt.consume();
                                getToolkit().beep();
                            }
                            if (a == '.') {

                                String dato = j.getText();
                                int tama = dato.length();
                                for (int i = 0; i <= tama; i++) {
                                    if (dato.contains(".")) {
                                        evt.setKeyChar((char) KeyEvent.VK_CLEAR);
                                    }
                                }

                            }

                        }
                    });

                }

            }
            if (fil1 == 1 && col1 == 1) {
                jPanel5.setLayout(new GridBagLayout());
                jPanel5.updateUI();
                this.pack();

            } else {
                jScrollPane1.setPreferredSize(new Dimension());
                jPanel5.setLayout(new GridLayout(fil1, col1));

                jPanel5.updateUI();
                this.pack();
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        try {
            //jPanel5.removeAll();
            jPanel5.removeAll();
            fil2 = mac.length;
            col2 = mac[0].length;
            txtFil.setText(String.valueOf(fil2));
            txtCol.setText(String.valueOf(col2));
            //fil1 = ma1.length;
            //col1 = ma1[0].length;

            ma = new JTextField[fil2][col2];

            for (int i = 0; i < fil2; i++) {
                for (int k = 0; k < col2; k++) {

                    JCTextField j = new JCTextField();
                    //j.setName("a" + (i + 1) + (k + 1));
                    j.setText(String.valueOf((mac[i][k].getText())));
                    ma[i][k] = j;
                    j.setPlaceholder("0");
                    jPanel5.add(j);

                    j.addKeyListener(new java.awt.event.KeyAdapter() {

                        @Override
                        public void keyTyped(java.awt.event.KeyEvent evt) {
                            char a = evt.getKeyChar();
                            boolean valido = false;

                            if (a == '-') {
                                Object component = evt.getComponent();
                                if (component instanceof JTextField) {
                                    JTextField tf = (JTextField) component;
                                    valido = tf.getText().isEmpty();
                                }

                            } else if ((a >= '0' && a <= '9') || a == '.') {
                                valido = true;
                            }
                            if (!valido) {
                                evt.consume();
                            }
                            if (j.getText().length() == 10) {

                                evt.consume();
                                getToolkit().beep();
                            }
                            if (a == '.') {

                                String dato = j.getText();
                                int tama = dato.length();
                                for (int i = 0; i <= tama; i++) {
                                    if (dato.contains(".")) {
                                        evt.setKeyChar((char) KeyEvent.VK_CLEAR);
                                    }
                                }

                            }

                        }
                    });

                }

            }
            if (fil2 == 1 && col2 == 1) {
                jPanel5.setLayout(new GridBagLayout());
                jPanel5.updateUI();
                this.pack();

            } else {
                jScrollPane1.setPreferredSize(new Dimension());
                jPanel5.setLayout(new GridLayout(fil2, col2));

                jPanel5.updateUI();
                this.pack();
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        
        try {
            
       
        if (!txtEscalar1.getText().isEmpty()) {
            fil1 = Integer.parseInt(txtFil1.getText());
            col1 = Integer.parseInt(txtCol1.getText());
            for (int i = 0; i < fil1; i++) {
                for (int k = 0; k < col1; k++) {
                    if (ma1[i][k].getText().isEmpty()) {
                        ma1[i][k].setText("0");
                    }

                }
            }

            double escalar = Double.parseDouble(txtEscalar1.getText());
            jLabel18.setText("(" + escalar + ")B");
            double es = 0;
            jPanel6.removeAll();
            mac = new JTextField[fil1][col1];
            for (int i = 0; i < fil1; i++) {
                for (int j = 0; j < col1; j++) {
                    es = escalar * Double.parseDouble(ma1[i][j].getText());
                    JTextField d = new JTextField();

                    d.setText(String.valueOf((double) Math.round(es * 100d) / 100d));
                    mac[i][j] = d;
                    jPanel6.add(d);
                 d.setEditable(false);

                }

            }

            jScrollPane2.setPreferredSize(new Dimension());
            jPanel6.setLayout(new GridLayout(fil1, col1));

            jPanel6.updateUI();
            this.pack();
            txtEscalar1.setText(null);
        }
         } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        try {
            //jPanel5.removeAll();
            jPanel4.removeAll();
            fil2 = mac.length;
            col2 = mac[0].length;
            txtFil1.setText(String.valueOf(fil2));
            txtCol1.setText(String.valueOf(col2));
            //fil1 = ma1.length;
            //col1 = ma1[0].length;

            ma1 = new JTextField[fil2][col2];

            for (int i = 0; i < fil2; i++) {
                for (int k = 0; k < col2; k++) {

                    JCTextField j = new JCTextField();
                    //j.setName("a" + (i + 1) + (k + 1));
                    j.setText(String.valueOf((mac[i][k].getText())));
                    ma1[i][k] = j;
                    j.setPlaceholder("0");
                    jPanel4.add(j);

                    j.addKeyListener(new java.awt.event.KeyAdapter() {

                        @Override
                        public void keyTyped(java.awt.event.KeyEvent evt) {
                            char a = evt.getKeyChar();
                            boolean valido = false;

                            if (a == '-') {
                                Object component = evt.getComponent();
                                if (component instanceof JTextField) {
                                    JTextField tf = (JTextField) component;
                                    valido = tf.getText().isEmpty();
                                }

                            } else if ((a >= '0' && a <= '9') || a == '.') {
                                valido = true;
                            }
                            if (!valido) {
                                evt.consume();
                            }
                            if (j.getText().length() == 10) {

                                evt.consume();
                                getToolkit().beep();
                            }
                            if (a == '.') {

                                String dato = j.getText();
                                int tama = dato.length();
                                for (int i = 0; i <= tama; i++) {
                                    if (dato.contains(".")) {
                                        evt.setKeyChar((char) KeyEvent.VK_CLEAR);
                                    }
                                }

                            }

                        }
                    });

                }

            }
            if (fil2 == 1 && col2 == 1) {
                jPanel4.setLayout(new GridBagLayout());
                jPanel4.updateUI();
                this.pack();

            } else {
                jScrollPane3.setPreferredSize(new Dimension());
                jPanel4.setLayout(new GridLayout(fil2, col2));

                jPanel4.updateUI();
                this.pack();
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        try {

            if (ma.length == ma[0].length) {
                jPGauusJ.removeAll();
                jPNI.removeAll();
                fil3 = ma.length;
                col3 = ma[0].length;
                for (int i = 0; i < fil3 + 1; i++) {
                    JTextField inc = new JTextField();
                    if (i < fil3) {

                        inc.setText("x" + (i + 1));
                        inc.setPreferredSize(new Dimension(50, 20));
                        inc.setEditable(false);
                        jPNI.add(inc);
                    } else {
                        inc.setText(" b");
                        inc.setPreferredSize(new Dimension(50, 20));
                        inc.setEditable(false);
                        jPNI.add(inc);
                    }

                }
                jSinc.setPreferredSize(new Dimension());
                jPNI.setLayout(new GridLayout(0, fil3 + 1));

                jPNI.updateUI();
                this.pack();
                //jPanel5.removeAll();

                txtIncognitas.setText(String.valueOf(fil3));

                //fil1 = ma1.length;
                //col1 = ma1[0].length;
                maGJt = new JTextField[fil3][col3];
                maGJ = new JTextField[fil3][col3 + 1];

                for (int i = 0; i < fil3; i++) {
                    for (int k = 0; k < col3 + 1; k++) {
                        JCTextField j = new JCTextField();
                        if (k < col3) {
                            maGJt[i][k] = ma[i][k];
                            j.setText(String.valueOf(maGJt[i][k].getText()));

                        }

                        maGJ[i][k] = j;
                        j.setPreferredSize(new Dimension(50, 50));
                        //j.setName("a" + (i + 1) + (k + 1));
                        j.setPlaceholder("0");
                        jPGauusJ.add(j);

                        j.addKeyListener(new java.awt.event.KeyAdapter() {

                            @Override
                            public void keyTyped(java.awt.event.KeyEvent evt) {
                                char a = evt.getKeyChar();
                                boolean valido = false;

                                if (a == '-') {
                                    Object component = evt.getComponent();
                                    if (component instanceof JTextField) {
                                        JTextField tf = (JTextField) component;
                                        valido = tf.getText().isEmpty();
                                    }

                                } else if ((a >= '0' && a <= '9') || a == '.') {
                                    valido = true;
                                }
                                if (!valido) {
                                    evt.consume();
                                }
                                if (j.getText().length() == 10) {

                                    evt.consume();
                                    getToolkit().beep();
                                }
                                if (a == '.') {

                                    String dato = j.getText();
                                    int tama = dato.length();
                                    for (int i = 0; i <= tama; i++) {
                                        if (dato.contains(".")) {
                                            evt.setKeyChar((char) KeyEvent.VK_CLEAR);
                                        }
                                    }

                                }

                            }
                        });

                    }

                }
                if (fil3 == 1 && col3 == 1) {
                    jPGauusJ.setLayout(new GridBagLayout());
                    jPGauusJ.updateUI();
                    this.pack();

                } else {
                    jscGaussJ.setPreferredSize(new Dimension());
                    jPGauusJ.setLayout(new GridLayout(fil3, col3));

                    jPGauusJ.updateUI();
                    this.pack();
                }
            } else {
                System.out.println("no hay matriz A ingresada");
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed

        try {

            jPGauusJ.removeAll();

            fil3 = maGJ.length;

            //jPanel5.removeAll();
            jPGauusJ.removeAll();

            //fil1 = ma1.length;
            //col1 = ma1[0].length;
            maGJt = new JTextField[fil3][fil3];

            for (int i = 0; i < fil3; i++) {
                for (int k = 0; k < fil3 + 1; k++) {
                    JCTextField j = new JCTextField();
                    if (k < fil3) {

                        j.setText(String.valueOf(maGJ[i][k].getText()));

                    } else {
                        j.setText(String.valueOf((int) (Math.random() * va)));
                    }

                    maGJ[i][k] = j;
                    j.setPreferredSize(new Dimension(50, 50));
                    //j.setName("a" + (i + 1) + (k + 1));
                    j.setPlaceholder("0");
                    jPGauusJ.add(j);

                    j.addKeyListener(new java.awt.event.KeyAdapter() {

                        @Override
                        public void keyTyped(java.awt.event.KeyEvent evt) {
                            char a = evt.getKeyChar();
                            boolean valido = false;

                            if (a == '-') {
                                Object component = evt.getComponent();
                                if (component instanceof JTextField) {
                                    JTextField tf = (JTextField) component;
                                    valido = tf.getText().isEmpty();
                                }

                            } else if ((a >= '0' && a <= '9') || a == '.') {
                                valido = true;
                            }
                            if (!valido) {
                                evt.consume();
                            }
                            if (j.getText().length() == 10) {

                                evt.consume();
                                getToolkit().beep();
                            }
                            if (a == '.') {

                                String dato = j.getText();
                                int tama = dato.length();
                                for (int i = 0; i <= tama; i++) {
                                    if (dato.contains(".")) {
                                        evt.setKeyChar((char) KeyEvent.VK_CLEAR);
                                    }
                                }

                            }

                        }
                    });

                }

            }
            if (fil3 == 1 && fil3 == 1) {
                jPGauusJ.setLayout(new GridBagLayout());
                jPGauusJ.updateUI();
                this.pack();

            } else {
                jscGaussJ.setPreferredSize(new Dimension());
                jPGauusJ.setLayout(new GridLayout(fil3, fil3));

                jPGauusJ.updateUI();
                this.pack();
            }

        } catch (Exception e) {
        }


    }//GEN-LAST:event_jButton21ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        try {

            if (ma1.length == ma1[0].length) {
                jPGauusJ.removeAll();
                jPNI.removeAll();
                fil3 = ma1.length;
                col3 = ma1[0].length;
                for (int i = 0; i < fil3 + 1; i++) {
                    JTextField inc = new JTextField();
                    if (i < fil3) {

                        inc.setText("x" + (i + 1));
                        inc.setPreferredSize(new Dimension(50, 20));
                        inc.setEditable(false);
                        jPNI.add(inc);
                    } else {
                        inc.setText(" b");
                        inc.setPreferredSize(new Dimension(50, 20));
                        inc.setEditable(false);
                        jPNI.add(inc);
                    }

                }
                jSinc.setPreferredSize(new Dimension());
                jPNI.setLayout(new GridLayout(0, fil3 + 1));

                jPNI.updateUI();
                this.pack();
                //jPanel5.removeAll();

                txtIncognitas.setText(String.valueOf(fil3));

                //fil1 = ma1.length;
                //col1 = ma1[0].length;
                maGJt = new JTextField[fil3][col3];
                maGJ = new JTextField[fil3][col3 + 1];

                for (int i = 0; i < fil3; i++) {
                    for (int k = 0; k < col3 + 1; k++) {
                        JCTextField j = new JCTextField();
                        if (k < col3) {
                            maGJt[i][k] = ma1[i][k];
                            j.setText(String.valueOf(maGJt[i][k].getText()));

                        }

                        maGJ[i][k] = j;
                        j.setPreferredSize(new Dimension(50, 50));
                        //j.setName("a" + (i + 1) + (k + 1));
                        j.setPlaceholder("0");
                        jPGauusJ.add(j);

                        j.addKeyListener(new java.awt.event.KeyAdapter() {

                            @Override
                            public void keyTyped(java.awt.event.KeyEvent evt) {
                                char a = evt.getKeyChar();
                                boolean valido = false;

                                if (a == '-') {
                                    Object component = evt.getComponent();
                                    if (component instanceof JTextField) {
                                        JTextField tf = (JTextField) component;
                                        valido = tf.getText().isEmpty();
                                    }

                                } else if ((a >= '0' && a <= '9') || a == '.') {
                                    valido = true;
                                }
                                if (!valido) {
                                    evt.consume();
                                }
                                if (j.getText().length() == 10) {

                                    evt.consume();
                                    getToolkit().beep();
                                }
                                if (a == '.') {

                                    String dato = j.getText();
                                    int tama = dato.length();
                                    for (int i = 0; i <= tama; i++) {
                                        if (dato.contains(".")) {
                                            evt.setKeyChar((char) KeyEvent.VK_CLEAR);
                                        }
                                    }

                                }

                            }
                        });

                    }

                }
                if (fil3 == 1 && col3 == 1) {
                    jPGauusJ.setLayout(new GridBagLayout());
                    jPGauusJ.updateUI();
                    this.pack();

                } else {
                    jscGaussJ.setPreferredSize(new Dimension());
                    jPGauusJ.setLayout(new GridLayout(fil3, col3));

                    jPGauusJ.updateUI();
                    this.pack();
                }
            } else {
                System.out.println("no hay matriz A ingresada");
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        try {

            if (mac.length == mac[0].length) {
                jPGauusJ.removeAll();
                jPNI.removeAll();
                fil3 = mac.length;
                col3 = mac[0].length;
                for (int i = 0; i < fil3 + 1; i++) {
                    JTextField inc = new JTextField();
                    if (i < fil3) {

                        inc.setText("x" + (i + 1));
                        inc.setPreferredSize(new Dimension(50, 20));
                        inc.setEditable(false);
                        jPNI.add(inc);
                    } else {
                        inc.setText(" b");
                        inc.setPreferredSize(new Dimension(50, 20));
                        inc.setEditable(false);
                        jPNI.add(inc);
                    }

                }
                jSinc.setPreferredSize(new Dimension());
                jPNI.setLayout(new GridLayout(0, fil3 + 1));

                jPNI.updateUI();
                this.pack();
                //jPanel5.removeAll();

                txtIncognitas.setText(String.valueOf(fil3));

                //fil1 = ma1.length;
                //col1 = ma1[0].length;
                maGJt = new JTextField[fil3][col3];
                maGJ = new JTextField[fil3][col3 + 1];

                for (int i = 0; i < fil3; i++) {
                    for (int k = 0; k < col3 + 1; k++) {
                        JCTextField j = new JCTextField();
                        if (k < col3) {
                            maGJt[i][k] = mac[i][k];
                            j.setText(String.valueOf(maGJt[i][k].getText()));

                        }

                        maGJ[i][k] = j;
                        j.setPreferredSize(new Dimension(50, 50));
                        //j.setName("a" + (i + 1) + (k + 1));
                        j.setPlaceholder("0");
                        jPGauusJ.add(j);

                        j.addKeyListener(new java.awt.event.KeyAdapter() {

                            @Override
                            public void keyTyped(java.awt.event.KeyEvent evt) {
                                char a = evt.getKeyChar();
                                boolean valido = false;

                                if (a == '-') {
                                    Object component = evt.getComponent();
                                    if (component instanceof JTextField) {
                                        JTextField tf = (JTextField) component;
                                        valido = tf.getText().isEmpty();
                                    }

                                } else if ((a >= '0' && a <= '9') || a == '.') {
                                    valido = true;
                                }
                                if (!valido) {
                                    evt.consume();
                                }
                                if (j.getText().length() == 10) {

                                    evt.consume();
                                    getToolkit().beep();
                                }
                                if (a == '.') {

                                    String dato = j.getText();
                                    int tama = dato.length();
                                    for (int i = 0; i <= tama; i++) {
                                        if (dato.contains(".")) {
                                            evt.setKeyChar((char) KeyEvent.VK_CLEAR);
                                        }
                                    }

                                }

                            }
                        });

                    }

                }
                if (fil3 == 1 && col3 == 1) {
                    jPGauusJ.setLayout(new GridBagLayout());
                    jPGauusJ.updateUI();
                    this.pack();

                } else {
                    jscGaussJ.setPreferredSize(new Dimension());
                    jPGauusJ.setLayout(new GridLayout(fil3, col3));

                    jPGauusJ.updateUI();
                    this.pack();
                }
            } else {
                System.out.println("no hay matriz A ingresada");
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton20ActionPerformed

    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed
        try {
            //jPanel5.removeAll();
            jPanel5.removeAll();
            fil2 = maGJ.length;
            col2 = maGJ[0].length;
            txtFil.setText(String.valueOf(fil2));
            txtCol.setText(String.valueOf(col2));
            //fil1 = ma1.length;
            //col1 = ma1[0].length;

            ma = new JTextField[fil2][col2];

            for (int i = 0; i < fil2; i++) {
                for (int k = 0; k < col2; k++) {

                    JCTextField j = new JCTextField();
                    //j.setName("a" + (i + 1) + (k + 1));
                    j.setText(String.valueOf((maGJ[i][k].getText())));
                    ma[i][k] = j;
                    j.setPlaceholder("0");
                    jPanel5.add(j);

                    j.addKeyListener(new java.awt.event.KeyAdapter() {

                        @Override
                        public void keyTyped(java.awt.event.KeyEvent evt) {
                            char a = evt.getKeyChar();
                            boolean valido = false;

                            if (a == '-') {
                                Object component = evt.getComponent();
                                if (component instanceof JTextField) {
                                    JTextField tf = (JTextField) component;
                                    valido = tf.getText().isEmpty();
                                }

                            } else if ((a >= '0' && a <= '9') || a == '.') {
                                valido = true;
                            }
                            if (!valido) {
                                evt.consume();
                            }
                            if (j.getText().length() == 10) {

                                evt.consume();
                                getToolkit().beep();
                            }
                            if (a == '.') {

                                String dato = j.getText();
                                int tama = dato.length();
                                for (int i = 0; i <= tama; i++) {
                                    if (dato.contains(".")) {
                                        evt.setKeyChar((char) KeyEvent.VK_CLEAR);
                                    }
                                }

                            }

                        }
                    });

                }

            }
            if (fil2 == 1 && col2 == 1) {
                jPanel5.setLayout(new GridBagLayout());
                jPanel5.updateUI();
                this.pack();

            } else {
                jScrollPane1.setPreferredSize(new Dimension());
                jPanel5.setLayout(new GridLayout(fil2, col2));

                jPanel5.updateUI();
                this.pack();
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton22ActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        try {
            //jPanel5.removeAll();
            jPanel4.removeAll();
            fil2 = maGJ.length;
            col2 = maGJ[0].length;
            txtFil1.setText(String.valueOf(fil2));
            txtCol1.setText(String.valueOf(col2));
            //fil1 = ma1.length;
            //col1 = ma1[0].length;

            ma1 = new JTextField[fil2][col2];

            for (int i = 0; i < fil2; i++) {
                for (int k = 0; k < col2; k++) {

                    JCTextField j = new JCTextField();
                    //j.setName("a" + (i + 1) + (k + 1));
                    j.setText(String.valueOf((maGJ[i][k].getText())));
                    ma1[i][k] = j;
                    j.setPlaceholder("0");
                    jPanel4.add(j);

                    j.addKeyListener(new java.awt.event.KeyAdapter() {

                        @Override
                        public void keyTyped(java.awt.event.KeyEvent evt) {
                            char a = evt.getKeyChar();
                            boolean valido = false;

                            if (a == '-') {
                                Object component = evt.getComponent();
                                if (component instanceof JTextField) {
                                    JTextField tf = (JTextField) component;
                                    valido = tf.getText().isEmpty();
                                }

                            } else if ((a >= '0' && a <= '9') || a == '.') {
                                valido = true;
                            }
                            if (!valido) {
                                evt.consume();
                            }
                            if (j.getText().length() == 10) {

                                evt.consume();
                                getToolkit().beep();
                            }
                            if (a == '.') {

                                String dato = j.getText();
                                int tama = dato.length();
                                for (int i = 0; i <= tama; i++) {
                                    if (dato.contains(".")) {
                                        evt.setKeyChar((char) KeyEvent.VK_CLEAR);
                                    }
                                }

                            }

                        }
                    });

                }

            }
            if (fil2 == 1 && col2 == 1) {
                jPanel4.setLayout(new GridBagLayout());
                jPanel4.updateUI();
                this.pack();

            } else {
                jScrollPane3.setPreferredSize(new Dimension());
                jPanel4.setLayout(new GridLayout(fil2, col2));

                jPanel4.updateUI();
                this.pack();
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton23ActionPerformed

    public void abrirArchivo(String archivo) {

        try {

            File objetofile = new File(archivo);
            Desktop.getDesktop().open(objetofile);

        } catch (IOException ex) {

            System.out.println(ex);

        }

    }

    public static double[][] intercambiarFilasMatriz(double[][] matriz, int i, int j) {
        double temp;
        for (int k = 0; k < matriz[0].length; k++) {
            temp = matriz[i][k];
            matriz[i][k] = matriz[j][k];
            matriz[j][k] = temp;

        }

        return matriz;

    }

    public static void imprimirMatriz(double[][] matriz) {
        for (int i = 0; i < matriz.length; i++) {
            for (int j = 0; j < matriz[0].length; j++) {
                System.out.print(matriz[i][j] + " ");
            }
            System.out.println("");
        }
    }

    public static int pivoteMatriz(double[][] matriz, int i) {
        int piv = i;
        double v = matriz[i][i];
        for (int j = i + 1; j < matriz.length; j++) {
            if (Math.abs(matriz[j][i]) > v) {
                v = matriz[j][i];
                piv = j;
            }
        }
        return piv;
    }

    /**
     *
     * @param m es una matriz cuadrada
     * @return
     */
    public static int eliminaAdelante(double[][] m) {
        int numeroIntercambios = 0;
        int filaPivote = -1;
        for (int columnaEvaluada = 0; columnaEvaluada < m.length; columnaEvaluada++) {
            filaPivote = pivoteMatriz(m, columnaEvaluada);

            if (filaPivote != columnaEvaluada) {
                m = intercambiarFilasMatriz(m, columnaEvaluada, filaPivote);
                numeroIntercambios++;
            }
            for (int i = columnaEvaluada + 1; i < m.length; i++) {
                for (int j = columnaEvaluada + 1; j < m.length; j++) {
                    if (m[columnaEvaluada][columnaEvaluada] == 0) {

                    } else {
                        m[i][j] = m[i][j] - (m[i][columnaEvaluada] * m[columnaEvaluada][j] / m[columnaEvaluada][columnaEvaluada]);
                    }
                }
                m[i][columnaEvaluada] = 0;
            }
        }
        return numeroIntercambios;
    }

    public static double det(double[][] m) {
        int numeroIntercambios = eliminaAdelante(m);
        double det = 1;
        for (int i = 0; i < m.length; i++) {
            det *= m[i][i];
        }
        if (numeroIntercambios % 2 == 1) {
            det = -det;
        }
        return det;
    }

    ////////////////////////////////
    public static double[][] invert(double a[][]) {
        int n = a.length;
        double x[][] = new double[n][n];
        double b[][] = new double[n][n];
        int index[] = new int[n];
        for (int i = 0; i < n; ++i) {
            b[i][i] = 1;
        }

        // Transform the matrix into an upper triangle
        gaussian(a, index);

        // Update the matrix b[i][j] with the ratios stored
        for (int i = 0; i < n - 1; ++i) {
            for (int j = i + 1; j < n; ++j) {
                for (int k = 0; k < n; ++k) {
                    b[index[j]][k]
                            -= a[index[j]][i] * b[index[i]][k];

                }

            }
        }

        // Perform backward substitutions
        for (int i = 0; i < n; ++i) {
            x[n - 1][i] = b[index[n - 1]][i] / a[index[n - 1]][n - 1];
            for (int j = n - 2; j >= 0; --j) {
                x[j][i] = b[index[j]][i];
                for (int k = j + 1; k < n; ++k) {
                    x[j][i] -= a[index[j]][k] * x[k][i];
                }
                x[j][i] /= a[index[j]][j];
            }
        }
        return x;
    }

// Method to carry out the partial-pivoting Gaussian
// elimination.  Here index[] stores pivoting order.
    public static void gaussian(double a[][], int index[]) {
        int n = index.length;
        double c[] = new double[n];

        // Initialize the index
        for (int i = 0; i < n; ++i) {
            index[i] = i;
        }

        // Find the rescaling factors, one from each row
        for (int i = 0; i < n; ++i) {
            double c1 = 0;
            for (int j = 0; j < n; ++j) {
                double c0 = Math.abs(a[i][j]);
                if (c0 > c1) {
                    c1 = c0;
                }
            }
            c[i] = c1;
        }

        // Search the pivoting element from each column
        int k = 0;
        for (int j = 0; j < n - 1; ++j) {
            double pi1 = 0;
            for (int i = j; i < n; ++i) {
                double pi0 = Math.abs(a[index[i]][j]);
                pi0 /= c[index[i]];
                if (pi0 > pi1) {
                    pi1 = pi0;
                    k = i;
                }
            }

            // Interchange rows according to the pivoting order
            int itmp = index[j];
            index[j] = index[k];
            index[k] = itmp;
            for (int i = j + 1; i < n; ++i) {
                double pj = a[index[i]][j] / a[index[j]][j];

                // Record pivoting ratios below the diagonal
                a[index[i]][j] = pj;

                // Modify other elements accordingly
                for (int l = j + 1; l < n; ++l) {
                    a[index[i]][l] -= pj * a[index[j]][l];
                }
            }
        }
    }

    //*******************
    //-----------------------------------------------------------------
    public static double[][] transpose(double[][] matrix) {
        double[][] transposedMatrix = new double[matrix.length][matrix.length];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix.length; j++) {
                transposedMatrix[j][i] = matrix[i][j];
            }
        }
        return transposedMatrix;
    }

    public static double determinant(double[][] matrix) {

        if (matrix.length == 1) {
            return matrix[0][0];
        }
        if (matrix.length == 2) {
            return (matrix[0][0] * matrix[1][1])
                    - (matrix[0][1] * matrix[1][0]);
        }
        double sum = 0.0;
        for (int i = 0; i < matrix.length; i++) {
            sum += changeSign(i) * matrix[0][i] * determinant(createSubMatrix(matrix, 0, i));
        }
        return sum;
    }

    public static int changeSign(int i) {
        if (i % 2 == 0) {
            return 1;
        } else {
            return -1;
        }
    }

    public static double[][] createSubMatrix(double[][] matrix, int excluding_row, int excluding_col) {
        double[][] mat = new double[matrix.length - 1][matrix.length - 1];
        int r = -1;
        for (int i = 0; i < matrix.length; i++) {
            if (i == excluding_row) {
                continue;
            }
            r++;
            int c = -1;
            for (int j = 0; j < matrix.length; j++) {
                if (j == excluding_col) {
                    continue;
                }
                mat[r][++c] = matrix[i][j];
            }
        }
        return mat;
    }

    public static double[][] cofactor(double[][] matrix) {
        double[][] mat = new double[matrix.length][matrix.length];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix.length; j++) {

                mat[i][j] = changeSign(i) * changeSign(j)
                        * determinant(createSubMatrix(matrix, i, j));
            }
        }

        return mat;
    }

    public static double[][] inverse(double[][] matrix) {

        double[][] madd = new double[matrix.length][matrix.length];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix.length; j++) {
                madd[i][j] = (transpose(cofactor(matrix))[i][j]) * (1.0 / determinant(matrix));
            }
        }

        return madd;
    }
//0000000000

    public static double[] GaussianElim(double[][] A, double[] b) {

        double pivot, factor;
        int i, j, k;

        int n = b.length;

        /* -----------------------------
         Gaussian elimination method
         ----------------------------- */
        for (i = 0; i < n; i++) {  // Process row i

            /* ---------------------
             (A) Select pivot
             --------------------- */
            pivot = A[i][i];

            txAProceaso1.append(String.valueOf("Selecciono pivote: " + (double) Math.round(pivot * 100d) / 100d + "\n"));
            //System.out.println("Selecciono pivote: " + pivot);
            /* ---------------------
             (B) Normalize row i
             --------------------- */
            for (j = 0; j < n; j++) {

                A[i][j] = A[i][j] / pivot;

            }

            b[i] = b[i] / pivot;

            /* ---------------------
             (C) Sweep using row i
             --------------------- */
            for (k = 0; k < n; k++) {
                if (k != i) {

                    txAProceaso1.append(String.valueOf("f" + (k + 1) + ": " + (double) Math.round(A[k][i] * 100d) / 100d + "\n"));
                    //System.out.println("f" + (k + 1) + ": " + A[k][i]);
                    factor = A[k][i];

                    for (j = 0; j < n; j++) {

                        txAProceaso1.append(String.valueOf("f" + (k + 1) + "-(" + (double) Math.round(factor * 100d) / 100d + "*f" + (i + 1) + ")→ f" + (k + 1) + "\n"));
                        //System.out.println("f" + (k + 1) + "-(" + factor + "*f" + (i + 1) + ")→ f" + (k + 1));

                        A[k][j] = A[k][j] - factor * A[i][j];
                    }

                    b[k] = b[k] - factor * b[i];
                }
            }
        }

        return (b);  // The answer is in double[] b
    }

    //---------------------------------------------------------------
    public static double determinante(double a[][]) {
        double c[][] = new double[a.length + (a.length - 1)][a.length];
        double det = 0;

        //almacena los resultados parciales
        double par[] = new double[(a.length) * 2];

        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < a[i].length; j++) {

                c[i][j] = a[i][j];

            }

        }
        int k = 0;
        for (int i = a.length; i < c.length; i++) {
            for (int j = 0; j < a.length; j++) {
                c[i][j] = a[k][j];

            }
            k++;
        }

        //calcula la suma de los productos y la inserta en par
        k = 0;
        double temp = 1;
        int inc = 1;

        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < a[i].length; j++) {
                temp = temp * c[k][j];
                k++;
            }
            k = inc;
            par[i] = temp;
            temp = 1;
            inc++;
        }

        //calcula la resta de los productos y la inserta en par
        k = a.length - 1;

        temp = 1;
        inc = a.length - 1;

        int l = (par.length) / 2;

        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < a[i].length; j++) {
                temp = temp * c[k][j];
                k--; //k=k-1;
            }
            par[l] = -temp;
            temp = 1;

            inc++;
            k = inc;
            l++;
        }

        det = suma(par);

        return det;
    }

    //sustituye los valores de b en a en la posicion pos
    public static double[][] sustituye(double a[][], double b[], double pos) {
        double c[][] = new double[a.length][a.length];

        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < a[i].length; j++) {
                if (j == pos) {
                    c[i][j] = b[i];
                } else {
                    c[i][j] = a[i][j];
                }

            }

        }

        return c;
    }

    public static double suma(double a[]) {
        double result = 0;
        for (int i = 0; i < a.length; i++) {
            result = result + a[i];
        }

        return result;

    }

    ///funcion cramer
    public static double[] cramer(double a[][], double b[]) {
        double Rcramer[] = new double[b.length];
        double det = determinante(a);
        if (det == 0) {

            System.out.println("no tiene solucion");
            return Rcramer;
        }

        double detTemp;

        double c[][] = new double[a.length][a.length];
        for (int i = 0; i < a.length; i++) {
            c = sustituye(a, b, i);

            detTemp = determinante(c);

            Rcramer[i] = (double) detTemp / (double) det;
        }
        return Rcramer;
    }

    //muestra los resultados de X
    //0505050486868686868686868686868686868686868686868686
    public double determinant(double A[][], int N) {
        double[][] m;
        double det = 0;
        double res;
        if (N == 1) {
            res = A[0][0];
        } else if (N == 2) {
            res = (A[0][0] * A[1][1]) - (A[1][0] * A[0][1]);
        } else {
            res = 0;
            for (int j1 = 0; j1 < N; j1++) {
                m = new double[N - 1][];
                for (int k = 0; k < (N - 1); k++) {
                    m[k] = new double[N - 1];
                }
                for (int i = 1; i < N; i++) {
                    int j2 = 0;
                    for (int j = 0; j < N; j++) {
                        if (j == j1) {
                            continue;
                        }
                        m[i - 1][j2] = A[i][j];
                        j2++;
                    }
                }
                res += Math.pow(-1.0, 1.0 + j1 + 1.0) * A[0][j1] * determinant(m, N - 1);
            }
        }
        return res;
    }

    public double[] cramers(double A[][], double B[]) {

        int N = A.length;
        double temp[][] = new double[N][N];
        double x[] = new double[N];
        for (int i = 0; i < N; i++) {
            txAProceaso1.append("\nx" + (i + 1) + " \n");
            for (int j = 0; j < N; j++) {
                for (int k = 0; k < N; k++) {
                    if (k == i) {

                        temp[j][k] = B[j];

                    } else {
                        temp[j][k] = A[j][k];

                    }

                    txAProceaso1.append(String.valueOf("(" + temp[j][k] + ")"));
                    if (k == N - 1) {
                        txAProceaso1.append("\n");
                    }

                }

            }
            txAProceaso1.append(" La determinante es: " + determinant(temp, N) + "\n");
            x[i] = determinant(temp, N) / determinant(A, N);
        }

        return x;
    }
//0000000000000000000000000000000000
    private static final double EPSILON = 1e-10;

    // Gaussian elimination with partial pivoting
    public static double[][] lsolve(double[][] A, int n) {

        for (int p = 0; p < n; p++) {

            // find pivot row and swap
            int max = p;
            for (int i = p + 1; i < n; i++) {
                if (Math.abs(A[i][p]) > Math.abs(A[max][p])) {
                    max = i;
                }
            }
            double[] temp = A[p];
            A[p] = A[max];
            A[max] = temp;

            // singular or nearly singular
           /* if (Math.abs(A[p][p]) <= EPSILON) {
             throw new ArithmeticException("Matrix is singular or nearly singular");
             }*/
            // pivot within A and b
            for (int i = p + 1; i < n; i++) {
                double alpha = A[i][p] / A[p][p];

                for (int j = p; j < n; j++) {
                    A[i][j] -= alpha * A[p][j];
                }
            }
        }

        return A;
    }
///////////////////////////////////////////reduccion de matriz por filas en java

    public static double[][] gaussElim(double[][] mat, int fil, int col) {
        double[][] resultado = mat; // Empezamos con la matriz actual como resultado; 
        // no hay problema porque las operaciones de fila no modifican la original sino que devuelven matrices nuevas
        for (int j = 0; j < col; j++) {
            for (int i = j + 1; i < fil; i++) {
                resultado = anadeFila(mat, i, j, -resultado[i][j] / resultado[j][j], fil, col);
            }
        }
        return resultado;
    }

    public static double[][] anadeFila(double[][] mat, int i1, int i2, double k, int fil, int col) {
        double[][] resultado = mat;
        for (int i = 0; i < fil; i++) {
            for (int j = 0; j < col; j++) {
                if (i == i1) {
                    // A los elementos de la fila i1 le sumamos k veces el elemento correspondiente de la fila i2
                    resultado[i1][j] = resultado[i][j] + k * resultado[i2][j];
                } else {
                    resultado[i][j] = resultado[i][j]; // Los demás elementos los dejamos tal cual
                }
            }
        }
        return resultado;
    }
//6--------------------------------------------------------
    //meto que calcule la determinante

    public double Determinante(int i, double[][] matriz) {

        if (matriz.length == 2) {
            double deter = matriz[0][0] * matriz[1][1] - matriz[0][1] * matriz[1][0];

            return deter;
        } else {
            double deter = 0;

            for (int j = 0; j < matriz.length; j++) {
                double[][] temp = this.SubMatriz(i, j, matriz);
                //jTextArea1.append(String.valueOf("La determinante es: " + this.Determinante(0, temp) + "\n"));
                deter = deter + Math.pow(-1, i + j) * matriz[i][j] * this.Determinante(0, temp);

            }

            return deter;
        }

    }

    //claculo de submatriz eliminado i, j
    int z = 1;
    int g = 0;

    private double[][] SubMatriz(int i, int j, double[][] matriz) {

        // jTextArea1.append("C" + 1 + (z++) + "=" + matriz[0][g++] + "\n");
        double[][] temp = new double[matriz.length - 1][matriz.length - 1];

        int count1 = 0;
        int count2 = 0;

        for (int k = 0; k < matriz.length; k++) {

            if (k != i) {

                count2 = 0;

                for (int l = 0; l < matriz.length; l++) {
                    if (l != j) {
                        temp[count1][count2] = matriz[k][l];

                        count2++;
                    }

                }

                count1++;
            }

        }

        for (int k = 0; k < matriz.length - 1; k++) {

            for (int l = 0; l < matriz.length - 1; l++) {
                //jTextArea1.append(String.valueOf("(" + temp[k][l]) + " ) ");

                if (l == matriz.length - 2) {
                    // jTextArea1.append("\n");

                }

            }
        }
        return temp;

    }

    //metodo para calcular la adjunta de una matrzi
    public double[][] AdjuntaMatriz(double[][] matriz) {

        double[][] tempAdjunta = new double[matriz.length][matriz.length];

        for (int i = 0; i < tempAdjunta.length; i++) {
            for (int j = 0; j < tempAdjunta.length; j++) {
                double[][] temp = this.SubMatriz(i, j, matriz);

                double elementoAdjunto = Math.pow(-1, i + j) * this.Determinante(0, temp);

                tempAdjunta[i][j] = elementoAdjunto;

            }

        }

        return tempAdjunta;

    }

//metodo para obtener la transpuesta de la matriz
    public double[][] TransouestaMatriz(double[][] matriz) {

        double[][] tempTranspuesta = new double[matriz.length][matriz.length];

        for (int i = 0; i < tempTranspuesta.length; i++) {
            for (int j = 0; j < tempTranspuesta.length; j++) {

                tempTranspuesta[i][j] = matriz[j][i];

            }

        }

        return tempTranspuesta;

    }

    //...................................
   /* public static void main(String[] args) {
     // new VtnPrincipal().setVisible(true);
        
     }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIns;
    private javax.swing.JButton btnIns1;
    private javax.swing.JButton btnIns2;
    private javax.swing.JButton btnIns3;
    private javax.swing.JButton btnInsertarInc;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPGauusJ;
    private javax.swing.JPanel jPNI;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JScrollPane jSinc;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JScrollPane jscGaussJ;
    public static javax.swing.JTextArea txAProceaso1;
    private javax.swing.JTextField txtCol;
    private javax.swing.JTextField txtCol1;
    private javax.swing.JTextField txtDA;
    private javax.swing.JTextField txtDA1;
    private javax.swing.JTextField txtEscalar;
    private javax.swing.JTextField txtEscalar1;
    private javax.swing.JTextField txtFil;
    private javax.swing.JTextField txtFil1;
    private javax.swing.JTextField txtIncognitas;
    // End of variables declaration//GEN-END:variables
}
